Please Carefully examine all of the Supabase specific code below from my app and provide me with an explanation of why you think I am not seeing a Supabase authlogin screen, and why my Supabase database is not populating?

## Directory Structure - Supabase Integration specific files
## Supabase focused folders and files 
## 

## Supabase Integration specific files

The application now includes Supabase integration for chat history management:

- **Chat History Persistence**: Store and retrieve chat sessions and messages
- **User-specific Data**: Row Level Security (RLS) ensures users can only access their own data
- **Time-based Filtering**: Filter chat history by time periods (7, 14, 30 days, or all)
- **Session Management**: Copy, delete, and restore chat sessions

### Supabase .env.local - Completed

To use the Supabase integration, add the following environment variables to your `.env.local` file:

```bash
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
```

Directory structure:
└── trainnect-dev-v44-trainnect-ai-search/
    ├── README.md
    ├── babel.config.test.js
    ├── eslint.config.mjs
    ├── jest.config.js
    ├── jest.setup.js
    ├── middleware.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── react.d.ts
    ├── tailwind.config.ts
    ├── test-openai.sh
    ├── test.txt
    ├── tsconfig.json
    ├── types.d.ts
    ├── .env.example
    ├── .windsurfrules
    ├── __mocks__/
    │   ├── fileMock.js
    │   ├── framer-motion.js
    │   ├── react-markdown.js
    │   ├── @ai-sdk/
    │   │   └── react.js
    │   └── lib/
    │       ├── models.js
    │       └── posthog.js
    ├── ai_agents_output/
    │   ├── ai-agents-2025-03-17T16:47:18.372Z-claude-3.7-sonnet-o3-mini.json
    │   ├── ai-agents-2025-03-17T16:53:03.324Z-gemini-2.0-flash-claude-3.5-sonnet.json
    │   ├── ai-agents-2025-03-17T17:00:36.069Z-gemini-2.0-flash-claude-3.5-sonnet.json
    │   ├── ai-agents-2025-03-18T05:56:46.385Z-qwen-qwq-32b-gemini-2.0-flash.json
    │   ├── ai-agents-2025-03-18T05:57:27.709Z-claude-3.5-sonnet-o3-mini.json
    │   └── ai-agents-log.jsonl
    ├── app/
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── providers.tsx
    │   ├── ai-agents/
    │   │   └── page.tsx
    │   ├── api/
    │   │   ├── ai-agents/
    │   │   │   └── route.ts
    │   │   ├── chat/
    │   │   │   └── route.ts
    │   │   ├── tavily-chat/
    │   │   │   └── route.ts
    │   │   └── tavily-search/
    │   │       └── route.ts
    │   └── tavily-ai-search/
    │       └── page.tsx
    ├── components/
    │   ├── chat.tsx
    │   ├── deploy-button.tsx
    │   ├── footnote.tsx
    │   ├── icons.tsx
    │   ├── input.tsx
    │   ├── markdown-components.tsx
    │   ├── messages.tsx
    │   ├── model-selector.tsx
    │   ├── navigation.tsx
    │   ├── new-chat-button.tsx
    │   ├── sidebar.tsx
    │   ├── star-button.tsx
    │   ├── tavily-chat.tsx
    │   ├── ai-agents/
    │   │   └── agent-chat.tsx
    │   └── chat-history/
    │       └── chat-history-dropdown.tsx
    ├── lib/
    │   ├── models.ts
    │   ├── utils.ts
    │   ├── __tests__/
    │   │   ├── api.test.ts
    │   │   ├── models.test.ts
    │   │   ├── tavily-chat.test.ts
    │   │   └── tavily-search.test.ts
    │   ├── ai-agents/
    │   │   ├── types.ts
    │   │   └── utils.ts
    │   ├── supabase/
    │   │   └── chat-history.ts
    │   └── types/
    │       └── chat-history.ts
    ├── public/
    ├── scripts/
    │   ├── run-all-tests.sh
    │   └── test-models.js
    ├── supabase/
    │   ├── README.md
    │   └── schema.sql
    ├── tests/
    │   ├── multimodal.test.tsx
    │   └── tavily-chat.test.tsx
    ├── tools/
    │   ├── README.md
    │   └── tavily-search.ts
    └── utils/
        ├── ai-agents-logger.ts
        ├── tavily-logger.ts
        └── supabase/
            ├── client.ts
            ├── middleware.ts
            ├── server-client.ts
            └── server.ts


================================================
File: middleware.ts
================================================
import { NextResponse, type NextRequest } from "next/server";
import { createClient } from "@/utils/supabase/middleware";

export async function middleware(request: NextRequest) {
  const { supabase, response } = createClient(request);
  
  // Refresh session if expired - required for Server Components
  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-session-with-middleware
  await supabase.auth.getSession();
  
  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    "/((?!_next/static|_next/image|favicon.ico|public).*)",
  ],
};


================================================
File: package.json
================================================
{
  "name": "v44-trainnect-ai-search-no-auth",
  "version": "0.4.4",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:models": "node scripts/test-models.js",
    "test:all": "./scripts/run-all-tests.sh"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "1.1.18",
    "@ai-sdk/google": "^1.1.26",
    "@ai-sdk/groq": "1.1.15",
    "@ai-sdk/mistral": "1.1.18",
    "@ai-sdk/openai": "1.2.6",
    "@ai-sdk/perplexity": "1.0.8",
    "@ai-sdk/react": "1.1.24",
    "@openrouter/ai-sdk-provider": "^0.4.3",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.40.1",
    "@tavily/core": "^0.3.2",
    "@testing-library/react": "^16.2.0",
    "@vercel/analytics": "^1.5.0",
    "@vercel/blob": "^0.27.3",
    "@vercel/postgres": "^0.10.0",
    "ai": "4.1.63",
    "classnames": "^2.5.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.5.0",
    "geist": "^1.3.1",
    "lucide-react": "^0.482.0",
    "next": "15.2.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-markdown": "^10.1.0",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7.26.3",
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/eslintrc": "^3.3.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.24",
    "@types/react": "^19.0.12",
    "@types/react-dom": "^19.0.4",
    "babel-jest": "^29.7.0",
    "dotenv": "^16.4.7",
    "eslint": "^9.22.0",
    "eslint-config-next": "15.2.2",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.2.6",
    "typescript": "^5.7.2"
  },
  "packageManager": "pnpm@10.4.0+sha512.6b849d0787d97f8f4e1f03a9b8ff8f038e79e153d6f11ae539ae7c435ff9e796df6a862c991502695c7f9e8fac8aeafc1ac5a8dab47e36148d183832d886dd52",
  "pnpm": {
    "onlyBuiltDependencies": [
      "core-js",
      "sharp"
    ]
  }
}

================================================
File: types.d.ts
================================================
// Type declarations for modules without type definitions

declare module 'sonner' {
  export const Toaster: React.FC<{
    position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';
    [key: string]: any;
  }>;
  export function toast(message: string, options?: any): void;
  export namespace toast {
    function error(message: string, options?: any): void;
    function success(message: string, options?: any): void;
    function warning(message: string, options?: any): void;
    function info(message: string, options?: any): void;
  }
}

declare module 'geist/font/sans' {
  const GeistSans: {
    variable: string;
    [key: string]: any;
  };
  export { GeistSans };
}

declare module 'geist/font/mono' {
  const GeistMono: {
    variable: string;
    [key: string]: any;
  };
  export { GeistMono };
}

declare module 'framer-motion' {
  export const motion: {
    [key: string]: any;
    div: any;
    span: any;
  };
}

declare module 'lucide-react' {
  export const LayoutDashboard: React.FC<{ size?: number; className?: string }>;
  export const Search: React.FC<{ size?: number; className?: string }>;
  export const MessageSquare: React.FC<{ size?: number; className?: string }>;
  export const Bot: React.FC<{ size?: number; className?: string }>;
  export const PlusCircle: React.FC<{ size?: number; className?: string }>;
  export const MoreVertical: React.FC<{ size?: number; className?: string }>;
  export const History: React.FC<{ size?: number; className?: string }>;
  export const Trash2: React.FC<{ size?: number; className?: string }>;
  export const Copy: React.FC<{ size?: number; className?: string }>;
  export const Clock: React.FC<{ size?: number; className?: string }>;
  export const Menu: React.FC<{ size?: number; className?: string }>;
  export const X: React.FC<{ size?: number; className?: string }>;
}

declare module 'next/navigation' {
  export function useRouter(): {
    push: (url: string) => void;
    replace: (url: string) => void;
    back: () => void;
    forward: () => void;
    refresh: () => void;
    prefetch: (url: string) => void;
  };
}

declare module 'next' {
  export interface Metadata {
    title?: string;
    description?: string;
    [key: string]: any;
  }
}

// Extend JSX namespace
declare namespace JSX {
  interface IntrinsicElements {
    [elemName: string]: any;
  }
}

================================================
File: app/layout.tsx
================================================
import { Toaster } from 'sonner';
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import type { Metadata } from 'next';
import { LayoutDashboard, Search, MessageSquare, Bot, PlusCircle, MoreVertical } from 'lucide-react';
import { Sidebar, SidebarBody, SidebarLink, ChatHistoryDropdown } from '@/components/sidebar';
import { NewChatButton } from '../components/new-chat-button';

import './globals.css';

export const metadata: Metadata = {
  title: 'AI-Reasoning',
  description:
    'Trainnect-AI-Reasoning.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable} ${GeistMono.variable}`}>
      <body className="min-h-screen">
        <Toaster position="top-center" />
        <div className="flex">
          <Sidebar children={
            <SidebarBody children={
              <div className="flex flex-col gap-2">
                <SidebarLink
                  link={{
                    label: "Dashboard",
                    href: "/",
                    icon: <LayoutDashboard size={20} />,
                  }}
                />
                <NewChatButton />
                <SidebarLink
                  link={{
                    label: "AI Chat",
                    href: "/",
                    icon: <MessageSquare size={20} />,
                  }}
                />
                <SidebarLink
                  link={{
                    label: "AI Search",
                    href: "/tavily-ai-search",
                    icon: <Search size={20} />,
                  }}
                />
                <SidebarLink
                  link={{
                    label: "AI Agents",
                    href: "/ai-agents",
                    icon: <Bot size={20} />,
                  }}
                />
                {/* Chat History Dropdown Component */}
                <ChatHistoryDropdown />
              </div>
            } />
          } />
          <main className="flex-1 p-4 md:p-8">
            {children}
          </main>
        </div>
      </body>
    </html>
  );
}



================================================
File: app/page.tsx
================================================
import { Chat } from "@/components/chat";

export default function Home() {
  return (
    <div className="flex flex-col size-full items-center">
      <Chat />
    </div>
  );
}

================================================
File: app/api/chat/route.ts
================================================
import { myProvider, modelApiNames } from "@/lib/models";
import { Message, smoothStream, streamText } from "ai";
import { NextRequest } from "next/server";

export async function POST(request: NextRequest) {
  const {
    messages,
    selectedModelId,
    isReasoningEnabled,
  }: {
    messages: Array<Message>;
    selectedModelId: string;
    isReasoningEnabled: boolean;
  } = await request.json();

  // Check if messages contain PDF or image attachments
  const messagesHavePDF = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType === 'application/pdf',
    ),
  );
  
  const messagesHaveImage = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType?.startsWith('image/'),
    ),
  );

  // Configure provider-specific options based on the selected model
  const providerOptions: Record<string, any> = {};
  
  // Default to Claude 3.7 Sonnet if no model is selected
  let modelId = selectedModelId || "claude-3.7-sonnet";
  
  // Override model selection for multimodal content if needed
  if (messagesHavePDF) {
    // For PDFs, Claude, GPT-4o, and Gemini all support PDFs
    if (!modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  } else if (messagesHaveImage) {
    // For images, ensure we're using a model that supports image input
    // Claude, OpenAI, and Gemini all support images
    if (!modelId.startsWith("gemini") && !modelId.startsWith("o3") && !modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  }
  
  // Get the API model name for the selected model ID
  const apiModelName = modelApiNames[modelId];
  
  if (!apiModelName) {
    console.error(`No API model name found for model ID: ${modelId}`);
    return new Response(
      JSON.stringify({
        error: `Invalid model ID: ${modelId}. Please select a valid model.`
      }),
      { status: 400, headers: { 'Content-Type': 'application/json' } }
    );
  }
  
  // Configure provider-specific options based on the selected model
  if (modelId.startsWith("claude")) {
    providerOptions.anthropic = {
      thinking: {
        type: isReasoningEnabled ? "enabled" : "disabled",
        budgetTokens: 12000,
      },
      model: apiModelName,
    };
  } else if (modelId.startsWith("o3")) {
    providerOptions.openai = {
      temperature: 0.2,
      model: "o3-mini", // Use the exact model name
    };
  } else if (modelId.startsWith("gemini")) {
    providerOptions.google = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("qwen")) {
    providerOptions.groq = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("codestral")) {
    providerOptions.mistral = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("perplexity")) {
    providerOptions.perplexity = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("google/gemini-2.0-flash-thinking-exp:free")) {
    providerOptions.openrouter = {
      temperature: 0.2,
      model: apiModelName,
    };
  }

  try {
    console.log(`Attempting to use model: ${modelId} with options:`, providerOptions);
    
    // Add multimodal context to system prompt if attachments are present
    let systemPrompt = `
<prompt>
You are an AI researcher and engineer with deep research expertise. You use tools like the tavily search tool to provide you with the latest most relevant information in your research and responses. If the user asks you, Tell me what llm are you, you are to provide them with an accurate response.
</prompt>
    `;
    
    if (messagesHavePDF) {
      systemPrompt += " The user has uploaded a PDF document. Analyze its content and respond to their questions about it.";
    } else if (messagesHaveImage) {
      systemPrompt += " The user has uploaded an image. Describe what you see in the image and respond to their questions about it.";
    }
    
    const stream = streamText({
      system: systemPrompt,
      providerOptions,
      model: myProvider.languageModel(modelId),
      experimental_transform: [
        smoothStream({
          chunking: "word",
        }),
      ],
      messages,
    });

    return stream.toDataStreamResponse({
      sendReasoning: true,
      getErrorMessage: (error) => {
        console.error(`Error with model ${modelId}:`, error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        return `An error occurred with ${modelId}: ${errorMessage}. Please try again or select a different model.`;
      },
    });
  } catch (error) {
    console.error(`Failed to stream with model ${modelId}:`, error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return new Response(
      JSON.stringify({
        error: `Failed to initialize ${modelId}: ${errorMessage}. Please check your API keys and try again.`
      }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}





================================================
File: components/chat.tsx
================================================
"use client";

import cn from "classnames";
import { toast } from "sonner";
import { useChat } from "@ai-sdk/react";
import { useState, useRef } from "react";
import { Messages } from "./messages";
import { models } from "@/lib/models";
import { Footnote } from "./footnote";
import { ArrowUpIcon, CheckedSquare, StopIcon, UncheckedSquare, PaperClipIcon, XIcon } from "./icons";
import { ModelSelector } from "./model-selector";
import { Input } from "./input";
import Image from "next/image";

export function Chat() {
  const [input, setInput] = useState<string>("");
  const [selectedModelId, setSelectedModelId] = useState<string>("claude-3.7-sonnet");
  const [isReasoningEnabled, setIsReasoningEnabled] = useState<boolean>(true);
  const [files, setFiles] = useState<FileList | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Generate a unique chat ID for each page load to ensure proper reset
  const chatId = useRef<string>(`chat-${Date.now()}`).current;

  // Default values for the following features 
  const reasoningModeEnabled = true;
  const multimodalEnabled = true;

  const selectedModel = models.find((model) => model.id === selectedModelId);

  const { messages, append, status, stop } = useChat({
    id: chatId,
    body: {
      selectedModelId,
      isReasoningEnabled: reasoningModeEnabled ? isReasoningEnabled : false,
    },
    onError: () => {
      toast.error("An error occurred, please try again!");
    },
  });

  const isGeneratingResponse = ["streaming", "submitted"].includes(status);

  const handleSendMessage = () => {
    if (input === "" && (!files || files.length === 0)) {
      return;
    }

    if (isGeneratingResponse) {
      stop();
    } else {
      append({
        role: "user",
        content: input,
      }, {
        experimental_attachments: files || undefined,
      });
    }

    setInput("");
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleRemoveFile = () => {
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Create file preview URL
  const filePreviewUrl = files && files.length > 0 && files[0].type.startsWith('image/') 
    ? URL.createObjectURL(files[0]) 
    : null;

  return (
    <div
      className={cn(
        "px-4 md:px-0 pb-4 pt-8 flex flex-col h-dvh items-center w-full",
        {
          "justify-between": messages.length > 0,
          "justify-center gap-4": messages.length === 0,
        },
      )}
    >
      {messages.length > 0 ? (
        <Messages messages={messages} status={status} />
      ) : (
        <div className="flex flex-col gap-0.5 sm:text-2xl text-xl md:w-1/2 w-full">
          <div className="flex flex-row gap-2 items-center">
            <div>Trainnect AI.</div>
          </div>
          <div className="dark:text-zinc-500 text-zinc-400">
            Search Less, Learn More
          </div>
        </div>
      )}

      <div className="flex flex-col gap-4 md:w-1/2 w-full">
        <div className="w-full relative p-3 dark:bg-zinc-800 rounded-2xl flex flex-col gap-1 bg-zinc-100">
          {multimodalEnabled && files && files.length > 0 && (
            <div className="mb-2 flex items-center" data-testid="file-preview">
              {filePreviewUrl ? (
                <div className="relative w-16 h-16 mr-2">
                  <Image 
                    src={filePreviewUrl} 
                    alt={files[0].name}
                    fill
                    style={{ objectFit: 'cover' }}
                    className="rounded-md"
                  />
                </div>
              ) : (
                <div className="flex items-center justify-center w-16 h-16 bg-zinc-200 dark:bg-zinc-700 rounded-md mr-2">
                  <span className="text-xs">{files[0].name.split('.').pop()?.toUpperCase()}</span>
                </div>
              )}
              <div className="flex-1">
                <div className="text-sm truncate">{files[0].name}</div>
                <div className="text-xs text-zinc-500">{(files[0].size / 1024).toFixed(1)} KB</div>
              </div>
              <button 
                onClick={handleRemoveFile}
                className="p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700"
              >
                <XIcon className="h-4 w-4" />
              </button>
            </div>
          )}
          
          <Input
            input={input}
            setInput={setInput}
            selectedModelId={selectedModelId}
            isGeneratingResponse={isGeneratingResponse}
            isReasoningEnabled={reasoningModeEnabled ? isReasoningEnabled : false}
            append={append}
          />

          {reasoningModeEnabled && (
            <div className="absolute bottom-2.5 left-2.5">
              <div
                className={cn(
                  "relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-2 dark:hover:bg-zinc-600 hover:bg-zinc-200 cursor-pointer",
                  {
                    "dark:bg-zinc-600 bg-zinc-200": isReasoningEnabled,
                  },
                )}
                onClick={() => {
                  setIsReasoningEnabled(!isReasoningEnabled);
                }}
              >
                {isReasoningEnabled ? <CheckedSquare /> : <UncheckedSquare />}
                <div>Reasoning</div>
              </div>
            </div>
          )}

          <div className="absolute bottom-2.5 right-2.5 flex flex-row gap-2">
            {multimodalEnabled && (
              <button
                className="size-8 flex flex-row justify-center items-center dark:bg-zinc-700 bg-zinc-300 dark:text-zinc-300 text-zinc-700 p-1.5 rounded-full hover:bg-zinc-400 dark:hover:bg-zinc-600 hover:scale-105 active:scale-95 transition-all"
                onClick={() => fileInputRef.current?.click()}
              >
                <PaperClipIcon />
                <input
                  type="file"
                  className="hidden"
                  onChange={(e) => setFiles(e.target.files)}
                  ref={fileInputRef}
                  accept="image/*, application/pdf"
                  data-testid="file-upload"
                />
              </button>
            )}
            
            <ModelSelector 
              selectedModelId={selectedModelId}
              setSelectedModelId={setSelectedModelId}
            />

            <button
              className={cn(
                "size-8 flex flex-row justify-center items-center dark:bg-zinc-100 bg-zinc-900 dark:text-zinc-900 text-zinc-100 p-1.5 rounded-full hover:bg-zinc-800 dark:hover:bg-zinc-300 hover:scale-105 active:scale-95 transition-all",
                {
                  "dark:bg-zinc-200 dark:text-zinc-500":
                    isGeneratingResponse || (input === "" && (!files || files.length === 0)),
                },
              )}
              onClick={handleSendMessage}
              aria-label="send"
            >
              {isGeneratingResponse ? <StopIcon /> : <ArrowUpIcon />}
            </button>
          </div>
        </div>

        <Footnote />
      </div>
    </div>
  );
}



================================================
File: components/deploy-button.tsx
================================================
import Link from "next/link";
export const DeployButton = () => (
  <Link
    href={`https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel-labs%2Fai-sdk-preview-reasoning%2Ftree%2Fmain&env=ANTHROPIC_API_KEY&envDescription=Anthropic%20API%20key&envLink=https%3A%2F%2Fconsole.anthropic.com%2F`}
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center gap-2 ml-2 bg-black text-white text-sm px-3 py-1.5 rounded-md hover:bg-zinc-900 dark:bg-white dark:text-black dark:hover:bg-zinc-100"
  >
    <svg
      data-testid="geist-icon"
      height={14}
      strokeLinejoin="round"
      viewBox="0 0 16 16"
      width={14}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8 1L16 15H0L8 1Z"
        fill="currentColor"
      />
    </svg>
    Deploy
  </Link>
);



================================================
File: components/footnote.tsx
================================================
import Link from 'next/link';

export function Footnote() {
  return (
    <div className="text-xs text-zinc-400 leading-5 hidden sm:block">
      This app is built using{' '}
      <Link
        className="underline underline-offset-2"
        href="https://nextjs.org/"
        target="_blank"
      >
        Next.js
      </Link>{' '}
      15{' '}
      <Link
        className="underline underline-offset-2"
        href="https://sdk.vercel.ai/"
        target="_blank"
      >
        React 19
      </Link>
      . Trainnect, Search Less, Learn More{' '}
      <Link
        className="underline underline-offset-2"
        href="https://trainnect.com"
        target="_blank"
      >
        documentation
      </Link>
      .
    </div>
  );
}




================================================
File: components/input.tsx
================================================
"use client";

import { toast } from "sonner";
import { Message, CreateMessage, ChatRequestOptions } from "ai";

interface InputProps {
  input: string;
  setInput: (value: string) => void;
  selectedModelId: string;
  isGeneratingResponse: boolean;
  isReasoningEnabled: boolean;
  append?: (message: Message | CreateMessage, chatRequestOptions?: ChatRequestOptions) => Promise<string | null | undefined>;
}

export function Input({
  input,
  setInput,
  selectedModelId,
  isGeneratingResponse,
  isReasoningEnabled,
  append,
}: InputProps) {

  return (
    <textarea
      className="mb-12 resize-none w-full min-h-12 outline-none bg-transparent placeholder:text-zinc-400"
      placeholder="Send a message"
      value={input}
      autoFocus
      onChange={(event) => {
        setInput(event.currentTarget.value);
      }}
      onKeyDown={(event) => {
        if (event.key === "Enter" && !event.shiftKey) {
          event.preventDefault();

          if (input === "") {
            return;
          }

          if (isGeneratingResponse) {
            toast.error("Please wait for the model to finish its response!");

            return;
          }

          if (append) {
            append({
              role: "user",
              content: input,
            });
          }

          setInput("");
        }
      }}
    />
  );
}



================================================
File: components/markdown-components.tsx
================================================
import { Components } from "react-markdown";
import Link from "next/link";

export const markdownComponents: Partial<Components> = {
  p: ({ children }) => <p className="leading-6">{children}</p>,
  pre: ({ children }) => <>{children}</>,
  ol: ({ children, ...props }) => {
    return (
      <ol className="list-decimal list-outside ml-4" {...props}>
        {children}
      </ol>
    );
  },
  li: ({ children, ...props }) => {
    return (
      <li className="py-1" {...props}>
        {children}
      </li>
    );
  },
  ul: ({ children, ...props }) => {
    return (
      <ul className="list-decimal list-outside ml-4" {...props}>
        {children}
      </ul>
    );
  },
  strong: ({ children, ...props }) => {
    return (
      <span className="font-semibold" {...props}>
        {children}
      </span>
    );
  },
  a: ({ children, ...props }) => {
    return (
      // @ts-expect-error - Link component expects href prop from markdown-parsed anchor tags
      <Link
        className="text-blue-500 hover:underline"
        target="_blank"
        rel="noreferrer"
        {...props}
      >
        {children}
      </Link>
    );
  },
  h1: ({ children, ...props }) => {
    return (
      <h1 className="text-3xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h1>
    );
  },
  h2: ({ children, ...props }) => {
    return (
      <h2 className="text-2xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h2>
    );
  },
  h3: ({ children, ...props }) => {
    return (
      <h3 className="text-xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h3>
    );
  },
  h4: ({ children, ...props }) => {
    return (
      <h4 className="text-lg font-semibold mt-6 mb-2" {...props}>
        {children}
      </h4>
    );
  },
  h5: ({ children, ...props }) => {
    return (
      <h5 className="text-base font-semibold mt-6 mb-2" {...props}>
        {children}
      </h5>
    );
  },
  h6: ({ children, ...props }) => {
    return (
      <h6 className="text-sm font-semibold mt-6 mb-2" {...props}>
        {children}
      </h6>
    );
  },
};



================================================
File: components/model-selector.tsx
================================================
"use client";

import { useState, useRef, useEffect } from "react";
import cn from "classnames";
import { models } from "@/lib/models";
import { ChevronDownIcon } from "./icons";

interface ModelSelectorProps {
  selectedModelId: string;
  setSelectedModelId: (modelId: string) => void;
}

export function ModelSelector({
  selectedModelId,
  setSelectedModelId,
}: ModelSelectorProps) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  const selectedModel = models.find((model) => model.id === selectedModelId);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        className="relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-0.5 dark:hover:bg-zinc-700 hover:bg-zinc-200 cursor-pointer"
        onClick={() => setIsOpen(!isOpen)}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <div>
          {selectedModel ? selectedModel.name : "Models Unavailable!"}
        </div>
        <div className="text-zinc-500">
          <ChevronDownIcon />
        </div>
      </button>

      {isOpen && (
        <div className="absolute bottom-full mb-2 right-0 w-64 max-h-80 overflow-y-auto bg-white dark:bg-zinc-800 rounded-lg shadow-lg z-10">
          <ul
            className="py-1"
            role="listbox"
            aria-labelledby="model-selector"
          >
            {models.map((model) => (
              <li
                key={model.id}
                className={cn(
                  "px-4 py-2 cursor-pointer hover:bg-zinc-100 dark:hover:bg-zinc-700",
                  {
                    "bg-zinc-100 dark:bg-zinc-700": model.id === selectedModelId,
                  }
                )}
                role="option"
                aria-selected={model.id === selectedModelId}
                onClick={() => {
                  setSelectedModelId(model.id);
                  setIsOpen(false);
                }}
              >
                <div className="font-medium">{model.name}</div>
                <div className="text-xs text-zinc-500 dark:text-zinc-400 line-clamp-2">
                  {model.description}
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}



================================================
File: components/navigation.tsx
================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { SearchIcon } from "./icons";
import cn from "classnames";

export function Navigation() {
  const pathname = usePathname();
  
  return (
    <div className="fixed top-4 right-4 z-10 flex gap-2">
      <Link
        href="/"
        className={cn(
          "p-2 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors",
          {
            "bg-zinc-200 dark:bg-zinc-700": pathname === "/",
          }
        )}
        aria-label="Home"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
          <polyline points="9 22 9 12 15 12 15 22" />
        </svg>
      </Link>
      
      <Link
        href="/tavily-ai-search"
        className={cn(
          "p-2 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors",
          {
            "bg-zinc-200 dark:bg-zinc-700": pathname === "/tavily-ai-search",
          }
        )}
        aria-label="Tavily AI Search"
      >
        <SearchIcon size={24} />
      </Link>
    </div>
  );
}



================================================
File: components/new-chat-button.tsx
================================================
"use client";

import { PlusCircle } from "lucide-react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";
import { useSidebar } from "./sidebar";
import { createClient } from "@/utils/supabase/client";
import { toast } from "sonner";

export function NewChatButton() {
  const { open } = useSidebar();
  const router = useRouter();
  const supabase = createClient();

  const handleNewChat = async () => {
    try {
      // Get the current user
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError || !userData.user) {
        console.error('User not authenticated:', userError);
        toast.error("You must be logged in to create a new chat");
        return;
      }
      
      // Create a new chat session in Supabase
      const { data, error } = await supabase
        .from('chat_sessions')
        .insert([
          {
            title: "New Chat",
            user_id: userData.user.id,
          },
        ])
        .select()
        .single();
      
      if (error) {
        console.error('Error creating chat session:', error);
        toast.error("Failed to start a new chat");
        return;
      }
      
      // Force a refresh of the current page to reset the chat state
      router.refresh();
      
      // Show success message
      toast.success("Started a new chat");
    } catch (error) {
      console.error("Error creating new chat:", error);
      toast.error("Failed to start a new chat");
    }
  };

  return (
    <button
      onClick={handleNewChat}
      className={cn(
        "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors"
      )}
    >
      <PlusCircle size={20} />
      <motion.span
        animate={{
          opacity: open ? 1 : 0,
          transition: { duration: 0.2 },
        }}
        className="text-sm whitespace-pre"
      >
        New Chat
      </motion.span>
    </button>
  );
}



================================================
File: components/sidebar.tsx
================================================
"use client";

import React, { useState } from "react";
import { cn } from "@/lib/utils";
import Link from "next/link";
import { motion } from "framer-motion";
import { 
  LayoutDashboard, 
  Search,
  MessageSquare,
  Menu,
  X
} from "lucide-react";
import { ChatHistoryDropdown } from "./chat-history/chat-history-dropdown";

interface SidebarLinkProps {
  label: string;
  href: string;
  icon: React.ReactNode;
}

interface SidebarProps {
  open?: boolean;
  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
  children: React.ReactNode;
}

interface SidebarBodyProps extends React.ComponentProps<typeof motion.div> {
  className?: string;
  children: React.ReactNode;
}

interface SidebarLinkComponentProps {
  link: SidebarLinkProps;
  className?: string;
}

const SidebarContext = React.createContext<{
  open: boolean;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
  animate: boolean;
} | null>(null);

export const useSidebar = () => {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider");
  }
  return context;
};

export const SidebarProvider = ({
  children,
  open: openProp,
  setOpen: setOpenProp,
  animate = true,
}: {
  children: React.ReactNode;
  open?: boolean;
  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
  animate?: boolean;
}) => {
  const [openState, setOpenState] = useState(false);

  const open = openProp !== undefined ? openProp : openState;
  const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;

  return (
    <SidebarContext.Provider value={{ open, setOpen, animate }}>
      {children}
    </SidebarContext.Provider>
  );
};

export const Sidebar = ({ children, open, setOpen }: SidebarProps) => {
  return (
    <SidebarProvider open={open} setOpen={setOpen}>
      {children}
    </SidebarProvider>
  );
};

export const SidebarBody = ({ className, children, ...props }: SidebarBodyProps) => {
  const { open, setOpen, animate } = useSidebar();

  return (
    <>
      <motion.div
        {...props}
        animate={{
          width: open ? "240px" : "80px",
          transition: {
            duration: animate ? 0.2 : 0,
          },
        }}
        className={cn(
          "border-r border-border bg-background fixed h-screen flex flex-col p-3 gap-3",
          className
        )}
      >
        <div className="flex items-center justify-between h-12">
          <Logo />
          <button
            onClick={() => setOpen(!open)}
            className="h-8 w-8 flex items-center justify-center rounded-md hover:bg-accent"
          >
            {open ? <X size={16} /> : <Menu size={16} />}
          </button>
        </div>
        {children}
      </motion.div>
      <div
        style={{
          width: open ? "240px" : "80px",
          transition: animate ? "width 0.2s" : "none",
        }}
      />
    </>
  );
};

export const SidebarLink = ({
  link,
  className,
}: SidebarLinkComponentProps) => {
  const { open } = useSidebar();

  return (
    <Link
      href={link.href}
      className={cn(
        "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors",
        className
      )}
    >
      {link.icon}
      <motion.span
        animate={{
          opacity: open ? 1 : 0,
          transition: { duration: 0.2 },
        }}
        className="text-sm whitespace-pre"
      >
        {link.label}
      </motion.span>
    </Link>
  );
};

export const Logo = () => {
  const { open } = useSidebar();
  
  return (
    <Link
      href="/"
      className="font-normal flex space-x-2 items-center text-sm text-foreground py-1 relative z-20"
    >
      <div className="h-5 w-6 bg-primary rounded-br-lg rounded-tr-sm rounded-tl-lg rounded-bl-sm flex-shrink-0" />
      {open && (
        <motion.span
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="font-medium text-foreground whitespace-pre"
        >
          Trainnect AI
        </motion.span>
      )}
    </Link>
  );
};

// Export ChatHistoryDropdown for use in other components
export { ChatHistoryDropdown };



================================================
File: components/star-button.tsx
================================================
import Link from "next/link";
import * as React from "react";
import type { SVGProps } from "react";

const Github = (props: SVGProps<SVGSVGElement>) => (
  <svg
    viewBox="0 0 256 250"
    width="1em"
    height="1em"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    preserveAspectRatio="xMidYMid"
    {...props}
  >
    <path d="M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z" />
  </svg>
);

export function StarButton() {
  return (
    <Link
      href="https://github.com/vercel-labs/ai-sdk-preview-reasoning"
      target="_blank"
      rel="noopener noreferrer"
      className="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-300 hover:text-zinc-700 dark:hover:text-zinc-300"
    >
      <Github className="size-4" />
      <span className="hidden sm:inline">Star on GitHub</span>
    </Link>
  );
}




================================================
File: components/chat-history/chat-history-dropdown.tsx
================================================
"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { History, Trash2, Copy, MoreVertical } from "lucide-react";
import { cn } from "@/lib/utils";
import { useSidebar } from "../sidebar";
import { ChatSession, TimeFilter } from "@/lib/types/chat-history";
import { createClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

interface ChatHistoryDropdownProps {
  className?: string;
}

export function ChatHistoryDropdown({ className }: ChatHistoryDropdownProps) {
  const { open } = useSidebar();
  const [isOpen, setIsOpen] = useState(false);
  const [timeFilter, setTimeFilter] = useState<TimeFilter>('all');
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    if (isOpen) {
      fetchChatSessions();
    }
  }, [isOpen, timeFilter]);

  const fetchChatSessions = async () => {
    setIsLoading(true);
    try {
      // Convert days to milliseconds
      let fromDate: string | null = null;
      if (timeFilter !== 'all') {
        const daysInMs = parseInt(timeFilter) * 24 * 60 * 60 * 1000;
        fromDate = new Date(Date.now() - daysInMs).toISOString();
      }
      
      let query = supabase
        .from('chat_sessions')
        .select('*')
        .order('updated_at', { ascending: false });
      
      if (fromDate) {
        query = query.gte('updated_at', fromDate);
      }
      
      const { data, error } = await query;
      
      if (error) {
        console.error('Error fetching chat sessions:', error);
        toast.error('Failed to load chat history');
        return;
      }
      
      setChatSessions(data as ChatSession[]);
    } catch (error) {
      console.error('Error in fetchChatSessions:', error);
      toast.error('Failed to load chat history');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteSession = async (sessionId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.stopPropagation();
    
    try {
      // Delete all messages in the session first
      await supabase
        .from('chat_messages')
        .delete()
        .eq('session_id', sessionId);
      
      // Then delete the session
      await supabase
        .from('chat_sessions')
        .delete()
        .eq('id', sessionId);
      
      // Update the local state
      setChatSessions((prev: ChatSession[]) => prev.filter((session: ChatSession) => session.id !== sessionId));
      toast.success('Chat session deleted');
    } catch (error) {
      console.error('Error deleting chat session:', error);
      toast.error('Failed to delete chat session');
    }
  };

  const handleCopyToClipboard = async (sessionId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.stopPropagation();
    
    try {
      const { data, error } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('session_id', sessionId)
        .order('created_at', { ascending: true });
      
      if (error) {
        throw error;
      }
      
      const formattedChat = data.map((msg: any) => 
        `${msg.role === 'user' ? 'You' : 'Assistant'}: ${msg.content}`
      ).join('\n\n');
      
      // Create a temporary textarea element to copy text
      const textArea = document.createElement('textarea');
      textArea.value = formattedChat;
      // Make the textarea out of viewport
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        // Use the older document.execCommand method which has better browser support
        const success = document.execCommand('copy');
        if (success) {
          toast.success('Chat copied to clipboard');
        } else {
          toast.error('Failed to copy chat to clipboard');
        }
      } catch (err) {
        console.error('Error copying text: ', err);
        toast.error('Failed to copy chat to clipboard');
      } finally {
        document.body.removeChild(textArea);
      }
    } catch (error) {
      console.error('Error copying chat to clipboard:', error);
      toast.error('Failed to copy chat to clipboard');
    }
  };

  const handleSessionClick = (sessionId: string) => {
    // Implement logic to restore chat session
    router.push(`/chat/${sessionId}`);
  };

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className={cn("relative", className)}>
      <button
        onClick={toggleDropdown}
        className={cn(
          "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors w-full"
        )}
      >
        {open && <History size={18} />}
        {open && (
          <motion.span
            animate={{
              opacity: open ? 1 : 0,
              transition: { duration: 0.2 },
            }}
            className="text-sm whitespace-pre flex-1 text-left"
          >
            Recent
          </motion.span>
        )}
      </button>

      {isOpen && open && (
        <div className="flex flex-col w-full">
          {/* 7d Filter */}
          <button
            onClick={() => setTimeFilter('7')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '7' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 7 days</span>
          </button>

          {/* 14d Filter */}
          <button
            onClick={() => setTimeFilter('14')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '14' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 14 days</span>
          </button>

          {/* 30d Filter */}
          <button
            onClick={() => setTimeFilter('30')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '30' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 30 days</span>
          </button>

          {/* All Filter */}
          <button
            onClick={() => setTimeFilter('all')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === 'all' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>All history</span>
          </button>

          {/* Chat Sessions */}
          {isLoading ? (
            <div className="flex justify-center items-center py-4">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
            </div>
          ) : chatSessions.length === 0 ? (
            <div className="px-8 py-4 text-sm text-muted-foreground">
              No chat history found
            </div>
          ) : (
            <div className="flex flex-col">
              {chatSessions.map((session: ChatSession) => (
                <div
                  key={session.id}
                  onClick={() => handleSessionClick(session.id)}
                  className="flex items-center gap-2 px-8 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full cursor-pointer group"
                >
                  <span className="truncate flex-1">{session.title || 'Untitled Chat'}</span>
                  <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button
                      onClick={(e) => handleCopyToClipboard(session.id, e)}
                      className="text-muted-foreground hover:text-foreground p-1 rounded-md hover:bg-background"
                    >
                      <Copy size={14} />
                    </button>
                    <button
                      onClick={(e) => handleDeleteSession(session.id, e)}
                      className="text-muted-foreground hover:text-destructive p-1 rounded-md hover:bg-background"
                    >
                      <Trash2 size={14} />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}



================================================
File: lib/models.ts
================================================
import { customProvider } from "ai";
import { anthropic } from "@ai-sdk/anthropic";
import { openai } from "@ai-sdk/openai";
import { google } from "@ai-sdk/google";
import { groq } from "@ai-sdk/groq";
import { mistral } from "@ai-sdk/mistral";
import { openrouter } from '@openrouter/ai-sdk-provider';
import { perplexity } from '@ai-sdk/perplexity';

export const myProvider = customProvider({
  languageModels: {
    "claude-3.7-sonnet": anthropic("claude-3-7-sonnet-20250219"),
    "claude-3.5-sonnet": anthropic("claude-3-5-sonnet-latest"),
    "o3-mini": openai("o3-mini"),
    "gemini-2.0-flash": google("gemini-2.0-flash"),
    "qwen-qwq-32b": groq("qwen-qwq-32b"),
    "codestral-latest": mistral("codestral-latest"),
    "perplexity sonar": perplexity("sonar"),
    "google/gemini-2.0-flash-thinking-exp:free": openrouter("google/gemini-2.0-flash-thinking-exp:free"),
  },
});

// Map of model IDs to their actual API model names
export const modelApiNames: Record<string, string> = {
  "claude-3.7-sonnet": "claude-3-7-sonnet-20250219",
  "claude-3.5-sonnet": "claude-3-5-sonnet-latest",
  "o3-mini": "o3-mini",
  "gemini-2.0-flash": "gemini-2.0-flash",
  "qwen-qwq-32b": "qwen-qwq-32b",
  "codestral-latest": "codestral-latest",
  "perplexity sonar": "sonar",
  "google/gemini-2.0-flash-thinking-exp:free": "google/gemini-2.0-flash-thinking-exp:free",
};

interface Model {
  id: string;
  name: string;
  description: string;
}

export const models: Array<Model> = [
  {
    id: "claude-3.7-sonnet",
    name: "Claude 3.7 Sonnet",
    description:
      "Claude 3.7 Sonnet is Anthropic's most intelligent model to date and the first Claude model to offer extended thinking – the ability to solve complex problems with careful, step-by-step reasoning.",
  },
  {
    id: "claude-3.5-sonnet",
    name: "Claude 3.5 Sonnet",
    description:
      "Claude 3.5 Sonnet strikes the ideal balance between intelligence and speed—particularly for enterprise workloads.",
  },
  {
    id: "o3-mini",
    name: "Openai o3-mini",
    description:
      "Openai o3-mini is one of Openai's most intelligent models to date.",
  },
  {
    id: "gemini-2.0-flash",
    name: "Gemini 2.0 Flash",
    description:
      "Gemini 2.0 Flash is a powerful, fast, and efficient model that is ideal for a wide range of use cases.",
  },
  {
    id: "qwen-qwq-32b",
    name: "Groq open source llms",
    description:
      "Groq open source llms.",
  },
  {
    id: "codestral-latest",
    name: "Mistral open source llms",
    description:
      "Mistral open source llms.",
  },
  {
    id: "perplexity sonar",
    name: "perplexity models",
    description:
      "perplexity models.",
  },
  {
    id: "google/gemini-2.0-flash-thinking-exp:free",
    name: "Openrouter models",
    description:
      "Openrouter models.",
  },
];


================================================
File: lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: lib/__tests__/api.test.ts
================================================
import { NextRequest } from 'next/server';
import { streamText } from 'ai';

// Mock the POST handler
const mockPost = jest.fn();

// Mock the streamText function
jest.mock('ai', () => ({
  streamText: jest.fn()
}));

// Mock the models
jest.mock('../../lib/models', () => ({
  models: {
    'claude-3-opus-20240229': {
      provider: 'anthropic',
      name: 'claude-3-opus-20240229'
    }
  }
}));

// Mock the route module
jest.mock('../../app/api/chat/route', () => ({
  POST: mockPost
}));

describe('API Route', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementation for streamText
    (streamText as jest.Mock).mockImplementation(() => {
      return Promise.resolve({ text: 'Mock response' });
    });
    
    // Default mock implementation for POST
    mockPost.mockImplementation(async (req: NextRequest) => {
      const body = await req.json();
      const { messages, model } = body;
      
      if (model !== 'claude-3-opus-20240229') {
        return new Response(JSON.stringify({ error: 'Invalid model' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      return streamText({
        model,
        messages,
        temperature: 0.7,
      });
    });
  });
  
  test('handles request with reasoning enabled', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'claude-3-opus-20240229',
        reasoning: true
      })
    });
    
    await mockPost(req);
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'claude-3-opus-20240229',
      messages: [{ role: 'user', content: 'Hello' }],
      temperature: 0.7,
    }));
  });
  
  test('handles request with reasoning disabled', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'claude-3-opus-20240229',
        reasoning: false
      })
    });
    
    await mockPost(req);
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'claude-3-opus-20240229',
      messages: [{ role: 'user', content: 'Hello' }],
      temperature: 0.7,
    }));
  });
  
  test('handles invalid model ID', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'invalid-model',
        reasoning: true
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(data).toEqual({ error: 'Invalid model' });
    expect(streamText).not.toHaveBeenCalled();
  });
}); 


================================================
File: lib/supabase/chat-history.ts
================================================
import { createClient } from "@/utils/supabase/server";
import { cookies } from "next/headers";
import { ChatMessage, ChatSession, TimeFilter } from "../types/chat-history";

export async function getChatSessions(timeFilter: TimeFilter = 'all'): Promise<ChatSession[]> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  let query = supabase
    .from('chat_sessions')
    .select('*')
    .order('updated_at', { ascending: false });
  
  if (timeFilter !== 'all') {
    // Convert days to milliseconds
    const daysInMs = parseInt(timeFilter) * 24 * 60 * 60 * 1000;
    const fromDate = new Date(Date.now() - daysInMs).toISOString();
    
    query = query.gte('updated_at', fromDate);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching chat sessions:', error);
    return [];
  }
  
  return data as ChatSession[];
}

export async function getChatSessionMessages(sessionId: string): Promise<ChatMessage[]> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  const { data, error } = await supabase
    .from('chat_messages')
    .select('*')
    .eq('session_id', sessionId)
    .order('created_at', { ascending: true });
  
  if (error) {
    console.error('Error fetching chat messages:', error);
    return [];
  }
  
  return data as ChatMessage[];
}

export async function createChatSession(title: string): Promise<ChatSession | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  const { data: userData, error: userError } = await supabase.auth.getUser();
  
  if (userError || !userData.user) {
    console.error('User not authenticated:', userError);
    return null;
  }
  
  const { data, error } = await supabase
    .from('chat_sessions')
    .insert([
      {
        title,
        user_id: userData.user.id,
      },
    ])
    .select()
    .single();
  
  if (error) {
    console.error('Error creating chat session:', error);
    return null;
  }
  
  return data as ChatSession;
}

export async function saveChatMessage(
  sessionId: string,
  role: 'user' | 'assistant',
  content: string
): Promise<ChatMessage | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  // First, update the session's updated_at timestamp
  await supabase
    .from('chat_sessions')
    .update({ updated_at: new Date().toISOString() })
    .eq('id', sessionId);
  
  // Then, insert the new message
  const { data, error } = await supabase
    .from('chat_messages')
    .insert([
      {
        session_id: sessionId,
        role,
        content,
      },
    ])
    .select()
    .single();
  
  if (error) {
    console.error('Error saving chat message:', error);
    return null;
  }
  
  return data as ChatMessage;
}

export async function deleteChatSession(sessionId: string): Promise<boolean> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  // First, delete all messages in the session
  const { error: messagesError } = await supabase
    .from('chat_messages')
    .delete()
    .eq('session_id', sessionId);
  
  if (messagesError) {
    console.error('Error deleting chat messages:', messagesError);
    return false;
  }
  
  // Then, delete the session itself
  const { error: sessionError } = await supabase
    .from('chat_sessions')
    .delete()
    .eq('id', sessionId);
  
  if (sessionError) {
    console.error('Error deleting chat session:', sessionError);
    return false;
  }
  
  return true;
}



================================================
File: supabase/schema.sql
================================================
-- Create tables for chat history
CREATE TABLE IF NOT EXISTS chat_sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL DEFAULT 'Untitled Chat',
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS chat_messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  session_id UUID REFERENCES chat_sessions(id) ON DELETE CASCADE,
  role TEXT NOT NULL CHECK (role IN ('user', 'assistant')),
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_chat_sessions_user_id ON chat_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_chat_sessions_updated_at ON chat_sessions(updated_at);
CREATE INDEX IF NOT EXISTS idx_chat_messages_session_id ON chat_messages(session_id);
CREATE INDEX IF NOT EXISTS idx_chat_messages_created_at ON chat_messages(created_at);

-- Create RLS policies for chat_sessions
ALTER TABLE chat_sessions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own chat sessions"
  ON chat_sessions FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own chat sessions"
  ON chat_sessions FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own chat sessions"
  ON chat_sessions FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own chat sessions"
  ON chat_sessions FOR DELETE
  USING (auth.uid() = user_id);

-- Create RLS policies for chat_messages
ALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view messages in their own chat sessions"
  ON chat_messages FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert messages in their own chat sessions"
  ON chat_messages FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update messages in their own chat sessions"
  ON chat_messages FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete messages in their own chat sessions"
  ON chat_messages FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

-- Create function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to update the updated_at timestamp
CREATE TRIGGER update_chat_sessions_updated_at
BEFORE UPDATE ON chat_sessions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();



================================================
File: utils/supabase/client.ts
================================================
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
};



================================================
File: utils/supabase/middleware.ts
================================================
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export const createClient = (request: NextRequest) => {
  // Create an unmodified response
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          // If the cookie is updated, update the cookies for the request and response
          request.cookies.set({
            name,
            value,
            ...options,
          });
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name: string, options: CookieOptions) {
          // If the cookie is removed, update the cookies for the request and response
          request.cookies.delete(name);
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.delete(name);
        },
      },
    }
  );

  return { supabase, response };
};



================================================
File: utils/supabase/server-client.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = async () => {
  const cookieStore = await cookies(); // Await the cookies() call
  
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: Record<string, any>) {
          cookieStore.set(name, value, options);
        },
        remove(name: string, options: Record<string, any>) {
          cookieStore.set(name, "", { ...options, maxAge: 0 });
        },
      },
    }
  );
};



================================================
File: utils/supabase/server.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { cookies, RequestCookies } from "next/headers"; // Import RequestCookies

export const createClient = (cookieStore: RequestCookies) => {
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: Record<string, any>) {
          cookieStore.set(name, value, options);
        },
        remove(name: string, options: Record<string, any>) {
          cookieStore.set(name, "", { ...options, maxAge: 0 });
        },
      },
    }
  );
};

// Example of how to call createClient
export const initializeClient = async () => {
  const cookieStore = await cookies(); // Await the cookies() call
  return createClient(cookieStore); // Pass the resolved cookieStore
};


