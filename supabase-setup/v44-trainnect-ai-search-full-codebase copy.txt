## Supabase Integration

The application now includes Supabase integration for chat history management:

- **Chat History Persistence**: Store and retrieve chat sessions and messages
- **User-specific Data**: Row Level Security (RLS) ensures users can only access their own data
- **Time-based Filtering**: Filter chat history by time periods (7, 14, 30 days, or all)
- **Session Management**: Copy, delete, and restore chat sessions

### Supabase Setup

To use the Supabase integration, add the following environment variables to your `.env.local` file:

```bash
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
```

The database schema can be found in `supabase/schema.sql`. Run these SQL statements in the Supabase SQL editor to set up the necessary tables and Row Level Security policies.

For detailed setup instructions, see the [Supabase Integration Documentation](supabase/README.md).

## Testing

The application includes comprehensive tests to ensure all features work correctly:

### Running Tests

```bash
# Run Jest tests
pnpm test

# Run model tests
pnpm test:models

# Run all tests (Jest + model tests)
pnpm test:all
```

### Test Coverage

- **Unit Tests**: Test individual components and functions
- **API Tests**: Test API routes for chat and search functionality
- **Model Tests**: Test all supported AI models
- **Integration Tests**: Test the complete application flow

For detailed testing instructions, see the [Tavily Testing Guide](docs/tavily-testing-guide.md).

## Running locally

You will need to use the environment variables [defined in `.env.example`](.env.example) to run Next.js AI Chatbot. It's recommended you use [Vercel Environment Variables](https://vercel.com/docs/projects/environment-variables) for this, but a `.env` file is all that is necessary.

> Note: You should not commit your `.env` file or it will expose secrets that will allow others to control access to your various OpenAI and authentication provider accounts.

1. Install Vercel CLI: `npm i -g vercel`
2. Link local instance with Vercel and GitHub accounts (creates `.vercel` directory): `vercel link`
3. Download your environment variables: `vercel env pull`

```bash
pnpm install
pnpm dev
```

Your app template should now be running on [localhost:3000](http://localhost:3000/).

## NODE MODULES - REMOVAL & CACHE CLEANING

```bash
rm -rf node_modules && pnpm store prune 
```
## NODE MODULES - REMOVAL, CACHE CLEANING & APP INSTALLATION

```bash
rm -rf node_modules && pnpm store prune && pnpm install
```

## NODE MODULES - REMOVAL, CACHE CLEANING, APP INSTALLATION & APP START

```bash
rm -rf node_modules && pnpm store prune && pnpm install && pnpm dev
```

## Shut down the npm server

```bash
pkill -f "npm"



================================================
File: babel.config.test.js
================================================
module.exports = {
  presets: [
    ['@babel/preset-env', { targets: { node: 'current' } }],
    '@babel/preset-typescript',
    ['@babel/preset-react', { runtime: 'automatic' }]
  ],
};



================================================
File: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
File: jest.config.js
================================================
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/__tests__/**/*.test.ts', '**/tests/**/*.test.tsx'],
  transform: {
    '^.+\\.(ts|tsx)$': ['babel-jest', { configFile: './babel.config.test.js' }],
  },
  transformIgnorePatterns: [
    '/node_modules/(?!(.pnpm|vfile|unist|unified|bail|is-plain-obj|trough|remark|micromark|decode-named-character-reference|character-entities|property-information|hast|space-separated-tokens|comma-separated-tokens|mdast|markdown-table|trim-lines|string-width|strip-ansi|ansi-regex|is-fullwidth-code-point|emoji-regex|character-entities-legacy|character-reference-invalid|@ai-sdk|ai))',
  ],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
    '^@/lib/models$': '<rootDir>/__mocks__/lib/models.js',
    '^@/lib/posthog$': '<rootDir>/__mocks__/lib/posthog.js',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js',
    '^react-markdown$': '<rootDir>/__mocks__/react-markdown.js',
    '^framer-motion$': '<rootDir>/__mocks__/framer-motion.js',
    '^@ai-sdk/react$': '<rootDir>/__mocks__/@ai-sdk/react.js',
  },
  setupFiles: ['<rootDir>/jest.setup.js'],
  testEnvironmentOptions: {
    customExportConditions: [''],
  },
  // Use different test environments based on the test file
  projects: [
    {
      displayName: 'node',
      testEnvironment: 'node',
      testMatch: ['**/__tests__/**/*.test.ts'],
      transform: {
        '^.+\\.(ts|tsx)$': ['babel-jest', { configFile: './babel.config.test.js' }],
      },
      transformIgnorePatterns: [
        '/node_modules/(?!(.pnpm|vfile|unist|unified|bail|is-plain-obj|trough|remark|micromark|decode-named-character-reference|character-entities|property-information|hast|space-separated-tokens|comma-separated-tokens|mdast|markdown-table|trim-lines|string-width|strip-ansi|ansi-regex|is-fullwidth-code-point|emoji-regex|character-entities-legacy|character-reference-invalid|@ai-sdk|ai))',
      ],
    },
    {
      displayName: 'jsdom',
      testEnvironment: 'jsdom',
      testMatch: ['**/tests/**/*.test.tsx'],
      transform: {
        '^.+\\.(ts|tsx)$': ['babel-jest', { configFile: './babel.config.test.js' }],
      },
      transformIgnorePatterns: [
        '/node_modules/(?!(.pnpm|vfile|unist|unified|bail|is-plain-obj|trough|remark|micromark|decode-named-character-reference|character-entities|property-information|hast|space-separated-tokens|comma-separated-tokens|mdast|markdown-table|trim-lines|string-width|strip-ansi|ansi-regex|is-fullwidth-code-point|emoji-regex|character-entities-legacy|character-reference-invalid|@ai-sdk|ai))',
      ],
    },
  ],
};



================================================
File: jest.setup.js
================================================
// This file is used to set up the testing environment for Jest
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables from .env.local
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

// Mock console.error and console.warn to keep test output clean
// but still capture the messages for assertion if needed
global.originalConsoleError = console.error;
global.originalConsoleWarn = console.warn;

console.error = (...args) => {
  global.lastConsoleError = args;
};

console.warn = (...args) => {
  global.lastConsoleWarn = args;
};

// Mock URL.createObjectURL for file previews
if (typeof window !== 'undefined') {
  window.URL.createObjectURL = jest.fn(() => 'mock-url');
  window.URL.revokeObjectURL = jest.fn();
}

// Mock ResizeObserver
if (typeof window !== 'undefined') {
  window.ResizeObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
  }));
}

// Mock IntersectionObserver
if (typeof window !== 'undefined') {
  window.IntersectionObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
  }));
}

// We'll handle cleanup in individual test files instead
// since afterAll is not available in the setup file



================================================
File: middleware.ts
================================================
import { NextResponse, type NextRequest } from "next/server";
import { createClient } from "@/utils/supabase/middleware";

export async function middleware(request: NextRequest) {
  const { supabase, response } = createClient(request);
  
  // Refresh session if expired - required for Server Components
  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-session-with-middleware
  await supabase.auth.getSession();
  
  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    "/((?!_next/static|_next/image|favicon.ico|public).*)",
  ],
};



================================================
File: next.config.ts
================================================
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  transpilePackages: ['geist'],
  images: {
    remotePatterns: [
      {
        hostname: 'vercel.com',
      },
    ],
  },
};

export default nextConfig;



================================================
File: package.json
================================================
{
  "name": "v44-trainnect-ai-search-no-auth",
  "version": "0.4.4",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:models": "node scripts/test-models.js",
    "test:all": "./scripts/run-all-tests.sh"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "1.1.18",
    "@ai-sdk/google": "^1.1.26",
    "@ai-sdk/groq": "1.1.15",
    "@ai-sdk/mistral": "1.1.18",
    "@ai-sdk/openai": "1.2.6",
    "@ai-sdk/perplexity": "1.0.8",
    "@ai-sdk/react": "1.1.24",
    "@openrouter/ai-sdk-provider": "^0.4.3",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.40.1",
    "@tavily/core": "^0.3.2",
    "@testing-library/react": "^16.2.0",
    "@vercel/analytics": "^1.5.0",
    "@vercel/blob": "^0.27.3",
    "@vercel/postgres": "^0.10.0",
    "ai": "4.1.63",
    "classnames": "^2.5.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.5.0",
    "geist": "^1.3.1",
    "lucide-react": "^0.482.0",
    "next": "15.2.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-markdown": "^10.1.0",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7.26.3",
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/eslintrc": "^3.3.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.24",
    "@types/react": "^19.0.12",
    "@types/react-dom": "^19.0.4",
    "babel-jest": "^29.7.0",
    "dotenv": "^16.4.7",
    "eslint": "^9.22.0",
    "eslint-config-next": "15.2.2",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.2.6",
    "typescript": "^5.7.2"
  },
  "packageManager": "pnpm@10.4.0+sha512.6b849d0787d97f8f4e1f03a9b8ff8f038e79e153d6f11ae539ae7c435ff9e796df6a862c991502695c7f9e8fac8aeafc1ac5a8dab47e36148d183832d886dd52",
  "pnpm": {
    "onlyBuiltDependencies": [
      "core-js",
      "sharp"
    ]
  }
}



================================================
File: react.d.ts
================================================
// React type declarations
import * as React from 'react';

declare global {
  namespace React {
    interface FC<P = {}> {
      (props: P & { children?: React.ReactNode }): React.ReactElement | null;
    }
    
    type ReactNode = 
      | React.ReactElement
      | string
      | number
      | boolean
      | null
      | undefined
      | React.ReactNodeArray;
      
    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {
      type: T;
      props: P;
      key: Key | null;
    }
    
    type Key = string | number;
    
    type ReactNodeArray = Array<ReactNode>;
    
    interface JSXElementConstructor<P> {
      (props: P): ReactElement<P, any> | null;
    }
  }
}



================================================
File: types.d.ts
================================================
// Type declarations for modules without type definitions

declare module 'sonner' {
  export const Toaster: React.FC<{
    position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';
    [key: string]: any;
  }>;
  export function toast(message: string, options?: any): void;
  export namespace toast {
    function error(message: string, options?: any): void;
    function success(message: string, options?: any): void;
    function warning(message: string, options?: any): void;
    function info(message: string, options?: any): void;
  }
}

declare module 'geist/font/sans' {
  const GeistSans: {
    variable: string;
    [key: string]: any;
  };
  export { GeistSans };
}

declare module 'geist/font/mono' {
  const GeistMono: {
    variable: string;
    [key: string]: any;
  };
  export { GeistMono };
}

declare module 'framer-motion' {
  export const motion: {
    [key: string]: any;
    div: any;
    span: any;
  };
}

declare module 'lucide-react' {
  export const LayoutDashboard: React.FC<{ size?: number; className?: string }>;
  export const Search: React.FC<{ size?: number; className?: string }>;
  export const MessageSquare: React.FC<{ size?: number; className?: string }>;
  export const Bot: React.FC<{ size?: number; className?: string }>;
  export const PlusCircle: React.FC<{ size?: number; className?: string }>;
  export const MoreVertical: React.FC<{ size?: number; className?: string }>;
  export const History: React.FC<{ size?: number; className?: string }>;
  export const Trash2: React.FC<{ size?: number; className?: string }>;
  export const Copy: React.FC<{ size?: number; className?: string }>;
  export const Clock: React.FC<{ size?: number; className?: string }>;
  export const Menu: React.FC<{ size?: number; className?: string }>;
  export const X: React.FC<{ size?: number; className?: string }>;
}

declare module 'next/navigation' {
  export function useRouter(): {
    push: (url: string) => void;
    replace: (url: string) => void;
    back: () => void;
    forward: () => void;
    refresh: () => void;
    prefetch: (url: string) => void;
  };
}

declare module 'next' {
  export interface Metadata {
    title?: string;
    description?: string;
    [key: string]: any;
  }
}

// Extend JSX namespace
declare namespace JSX {
  interface IntrinsicElements {
    [elemName: string]: any;
  }
}

================================================
File: app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --background: #ffffff;
    --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
    :root {
        --background: #0a0a0a;
        --foreground: #ededed;
    }
}

body {
    color: var(--foreground);
    background: var(--background);
}



================================================
File: app/layout.tsx
================================================
import { Toaster } from 'sonner';
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import type { Metadata } from 'next';
import { LayoutDashboard, Search, MessageSquare, Bot, PlusCircle, MoreVertical } from 'lucide-react';
import { Sidebar, SidebarBody, SidebarLink, ChatHistoryDropdown } from '@/components/sidebar';
import { NewChatButton } from '../components/new-chat-button';

import './globals.css';

export const metadata: Metadata = {
  title: 'AI-Reasoning',
  description:
    'Trainnect-AI-Reasoning.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable} ${GeistMono.variable}`}>
      <body className="min-h-screen">
        <Toaster position="top-center" />
        <div className="flex">
          <Sidebar children={
            <SidebarBody children={
              <div className="flex flex-col gap-2">
                <SidebarLink
                  link={{
                    label: "Dashboard",
                    href: "/",
                    icon: <LayoutDashboard size={20} />,
                  }}
                />
                <NewChatButton />
                <SidebarLink
                  link={{
                    label: "AI Chat",
                    href: "/",
                    icon: <MessageSquare size={20} />,
                  }}
                />
                <SidebarLink
                  link={{
                    label: "AI Search",
                    href: "/tavily-ai-search",
                    icon: <Search size={20} />,
                  }}
                />
                <SidebarLink
                  link={{
                    label: "AI Agents",
                    href: "/ai-agents",
                    icon: <Bot size={20} />,
                  }}
                />
                {/* Chat History Dropdown Component */}
                <ChatHistoryDropdown />
              </div>
            } />
          } />
          <main className="flex-1 p-4 md:p-8">
            {children}
          </main>
        </div>
      </body>
    </html>
  );
}



================================================
File: app/page.tsx
================================================
import { Chat } from "@/components/chat";

export default function Home() {
  return (
    <div className="flex flex-col size-full items-center">
      <Chat />
    </div>
  );
}



================================================
File: app/providers.tsx
================================================
'use client';

export function PostHogProvider({ children }: { children: React.ReactNode }) {
  return <>{children}</>;
}



================================================
File: app/ai-agents/page.tsx
================================================
import { AgentChat } from '@/components/ai-agents/agent-chat';

export default function AIAgentsPage() {
  return (
    <div className="container mx-auto">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">AI Agents</h1>
        <p className="text-muted-foreground">
          Multi-step AI processing with model switching. The primary model handles research using
          Tavily search, while the secondary model processes and refines the results.
        </p>
      </div>
      <AgentChat />
    </div>
  );
}



================================================
File: app/api/ai-agents/route.ts
================================================
import { createDataStreamResponse, streamText, tool } from 'ai';
import { z } from 'zod';
import { getModelInstance } from '@/lib/ai-agents/utils';
import type { ModelConfig } from '@/lib/ai-agents/types';
import { searchTavily } from "@/tools/tavily-search";
import { aiAgentsLogger } from '@/utils/ai-agents-logger';

export async function POST(req: Request) {
  const { messages, primaryModel, secondaryModel } = await req.json();
  const timestamp = new Date().toISOString();
  const query = messages[messages.length - 1].content;

  return createDataStreamResponse({
    execute: async dataStream => {
      try {
        // Get all previous messages except the last one (which is the new query)
        const previousMessages = messages.slice(0, -1);
        const newMessage = messages[messages.length - 1];

        // Step 1: Research with primary model and Tavily search
        const result1 = streamText({
          model: getModelInstance(primaryModel as ModelConfig),
          system: 'You are an expert researcher who uses the Tavily search tool to find relevant information. Provide concise, factual responses based on search results. Maintain context from previous messages when relevant.',
          messages: [...previousMessages, newMessage], // Include conversation history
          toolChoice: 'required',
          tools: {
            tavily: tool({
              parameters: z.object({ query: z.string() }),
              execute: async ({ query }) => {
                const results = await searchTavily({ 
                  query,
                  searchDepth: "advanced",
                  includeAnswer: true,
                });
                return JSON.stringify(results);
              },
            }),
          },
        });

        // Forward initial result without finish event
        result1.mergeIntoDataStream(dataStream, {
          experimental_sendFinish: false,
        });

        const primaryResults = await result1.response;

        // Step 2: Process results with secondary model
        const result2 = streamText({
          model: getModelInstance(secondaryModel as ModelConfig),
          system: 'You are an expert at analyzing and synthesizing information. Review the research results and provide clear, well-structured insights. Maintain context from the conversation history when relevant.',
          messages: [
            ...previousMessages,
            {
              role: 'assistant',
              content: 'Here is the research information: ' + primaryResults.messages[primaryResults.messages.length - 1].content
            },
            newMessage
          ],
        });

        // Forward second result (including finish event)
        result2.mergeIntoDataStream(dataStream, {
          experimental_sendStart: false,
        });

        const secondaryResults = await result2.response;

        // Log both models' results
        await aiAgentsLogger.logProcessing({
          timestamp,
          query,
          primaryModel,
          secondaryModel,
          primaryResults,
          secondaryResults
        });
      } catch (error) {
        console.error('Error in AI Agents processing:', error);
        throw error;
      }
    },
  });
}



================================================
File: app/api/chat/route.ts
================================================
import { myProvider, modelApiNames } from "@/lib/models";
import { Message, smoothStream, streamText } from "ai";
import { NextRequest } from "next/server";

export async function POST(request: NextRequest) {
  const {
    messages,
    selectedModelId,
    isReasoningEnabled,
  }: {
    messages: Array<Message>;
    selectedModelId: string;
    isReasoningEnabled: boolean;
  } = await request.json();

  // Check if messages contain PDF or image attachments
  const messagesHavePDF = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType === 'application/pdf',
    ),
  );
  
  const messagesHaveImage = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType?.startsWith('image/'),
    ),
  );

  // Configure provider-specific options based on the selected model
  const providerOptions: Record<string, any> = {};
  
  // Default to Claude 3.7 Sonnet if no model is selected
  let modelId = selectedModelId || "claude-3.7-sonnet";
  
  // Override model selection for multimodal content if needed
  if (messagesHavePDF) {
    // For PDFs, Claude, GPT-4o, and Gemini all support PDFs
    if (!modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  } else if (messagesHaveImage) {
    // For images, ensure we're using a model that supports image input
    // Claude, OpenAI, and Gemini all support images
    if (!modelId.startsWith("gemini") && !modelId.startsWith("o3") && !modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  }
  
  // Get the API model name for the selected model ID
  const apiModelName = modelApiNames[modelId];
  
  if (!apiModelName) {
    console.error(`No API model name found for model ID: ${modelId}`);
    return new Response(
      JSON.stringify({
        error: `Invalid model ID: ${modelId}. Please select a valid model.`
      }),
      { status: 400, headers: { 'Content-Type': 'application/json' } }
    );
  }
  
  // Configure provider-specific options based on the selected model
  if (modelId.startsWith("claude")) {
    providerOptions.anthropic = {
      thinking: {
        type: isReasoningEnabled ? "enabled" : "disabled",
        budgetTokens: 12000,
      },
      model: apiModelName,
    };
  } else if (modelId.startsWith("o3")) {
    providerOptions.openai = {
      temperature: 0.2,
      model: "o3-mini", // Use the exact model name
    };
  } else if (modelId.startsWith("gemini")) {
    providerOptions.google = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("qwen")) {
    providerOptions.groq = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("codestral")) {
    providerOptions.mistral = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("perplexity")) {
    providerOptions.perplexity = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("google/gemini-2.0-flash-thinking-exp:free")) {
    providerOptions.openrouter = {
      temperature: 0.2,
      model: apiModelName,
    };
  }

  try {
    console.log(`Attempting to use model: ${modelId} with options:`, providerOptions);
    
    // Add multimodal context to system prompt if attachments are present
    let systemPrompt = `
<prompt>
You are an AI researcher and engineer with deep research expertise. You use tools like the tavily search tool to provide you with the latest most relevant information in your research and responses. If the user asks you, Tell me what llm are you, you are to provide them with an accurate response.
</prompt>
    `;
    
    if (messagesHavePDF) {
      systemPrompt += " The user has uploaded a PDF document. Analyze its content and respond to their questions about it.";
    } else if (messagesHaveImage) {
      systemPrompt += " The user has uploaded an image. Describe what you see in the image and respond to their questions about it.";
    }
    
    const stream = streamText({
      system: systemPrompt,
      providerOptions,
      model: myProvider.languageModel(modelId),
      experimental_transform: [
        smoothStream({
          chunking: "word",
        }),
      ],
      messages,
    });

    return stream.toDataStreamResponse({
      sendReasoning: true,
      getErrorMessage: (error) => {
        console.error(`Error with model ${modelId}:`, error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        return `An error occurred with ${modelId}: ${errorMessage}. Please try again or select a different model.`;
      },
    });
  } catch (error) {
    console.error(`Failed to stream with model ${modelId}:`, error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return new Response(
      JSON.stringify({
        error: `Failed to initialize ${modelId}: ${errorMessage}. Please check your API keys and try again.`
      }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}



================================================
File: app/api/tavily-chat/route.ts
================================================
// app/api/tavily-chat/route.ts
import { myProvider, modelApiNames } from "@/lib/models";
import { Message, smoothStream, streamText } from "ai";
import { NextRequest } from "next/server";
import { searchTavily } from "@/tools/tavily-search";

export async function POST(request: NextRequest) {
  const {
    messages,
    selectedModelId,
    isReasoningEnabled,
    searchQuery,
  }: {
    messages: Array<Message>;
    selectedModelId: string;
    isReasoningEnabled: boolean;
    searchQuery?: string;
  } = await request.json();

  // Check if messages contain PDF or image attachments
  const messagesHavePDF = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType === 'application/pdf',
    ),
  );
  
  const messagesHaveImage = messages.some(message =>
    message.experimental_attachments?.some(
      a => a.contentType?.startsWith('image/'),
    ),
  );

  // Configure provider-specific options based on the selected model
  const providerOptions: Record<string, any> = {};
  
  // Default to Claude 3.7 Sonnet if no model is selected
  let modelId = selectedModelId || "claude-3.7-sonnet";
  
  // Override model selection for multimodal content if needed
  if (messagesHavePDF) {
    // For PDFs, Claude, GPT-4o, and Gemini all support PDFs
    if (!modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  } else if (messagesHaveImage) {
    // For images, ensure we're using a model that supports image input
    // Claude, GPT-4o, and Gemini all support images
    if (!modelId.startsWith("gemini") && !modelId.startsWith("o3") && !modelId.startsWith("gemini")) {
      modelId = "gemini-2.0-flash";
    }
  }
  
  // Get the API model name for the selected model ID
  const apiModelName = modelApiNames[modelId];
  
  if (!apiModelName) {
    console.error(`No API model name found for model ID: ${modelId}`);
    return new Response(
      JSON.stringify({
        error: `Invalid model ID: ${modelId}. Please select a valid model.`
      }),
      { status: 400, headers: { 'Content-Type': 'application/json' } }
    );
  }
  
  // Configure provider-specific options based on the selected model
  if (modelId.startsWith("claude")) {
    providerOptions.anthropic = {
      thinking: {
        type: isReasoningEnabled ? "enabled" : "disabled",
        budgetTokens: 12000,
      },
      model: apiModelName,
    };
  } else if (modelId.startsWith("o3")) {
    providerOptions.openai = {
      temperature: 0.2,
      model: "o3-mini", // Use the exact model name
    };
  } else if (modelId.startsWith("gemini")) {
    providerOptions.google = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("qwen")) {
    providerOptions.groq = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("codestral")) {
    providerOptions.mistral = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("perplexity")) {
    providerOptions.perplexity = {
      temperature: 0.2,
      model: apiModelName,
    };
  } else if (modelId.includes("google/gemini-2.0-flash-thinking-exp:free")) {
    providerOptions.openrouter = {
      temperature: 0.2,
      model: apiModelName,
    };
  }

  try {
    console.log(`Attempting to use model: ${modelId} with options:`, providerOptions);
    
    // Perform Tavily search if searchQuery is provided
    let searchResults = null;
    if (searchQuery) {
      try {
        searchResults = await searchTavily({
          query: searchQuery,
          searchDepth: "basic",
          maxResults: 5,
          includeAnswer: true,
          modelId: modelId // Pass the model ID to track which model triggered the search
        });
        console.log("Tavily search results:", searchResults);
      } catch (error) {
        console.error("Error performing Tavily search:", error);
      }
    }
    
    // Add multimodal context to system prompt if attachments are present
    let systemPrompt = `
<prompt>
You are an AI researcher and engineer with deep research expertise. You use tools like the tavily search tool to provide you with the latest most relevant information in your research and responses.  
</prompt>
    `;
    
    if (messagesHavePDF) {
      systemPrompt += " The user has uploaded a PDF document. Analyze its content and respond to their questions about it.";
    } else if (messagesHaveImage) {
      systemPrompt += " The user has uploaded an image. Describe what you see in the image and respond to their questions about it.";
    }
    
    // Add search results to the system prompt if available
    if (searchResults) {
      systemPrompt += `\n\nI have searched the web for information related to the user's query. Here are the search results:
${JSON.stringify(searchResults, null, 2)}

Use these search results to provide a more informed response to the user's question. Always cite your sources.`;
    }
    
    const stream = streamText({
      system: systemPrompt,
      providerOptions,
      model: myProvider.languageModel(modelId),
      experimental_transform: [
        smoothStream({
          chunking: "word",
        }),
      ],
      messages,
    });

    return stream.toDataStreamResponse({
      sendReasoning: true,
      getErrorMessage: (error) => {
        console.error(`Error with model ${modelId}:`, error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        return `An error occurred with ${modelId}: ${errorMessage}. Please try again or select a different model.`;
      },
    });
  } catch (error) {
    console.error(`Failed to stream with model ${modelId}:`, error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return new Response(
      JSON.stringify({
        error: `Failed to initialize ${modelId}: ${errorMessage}. Please check your API keys and try again.`
      }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}


================================================
File: app/api/tavily-search/route.ts
================================================
// app/api/tavily-search/route.ts
import { NextRequest } from "next/server";
import { searchTavily, TavilySearchParams } from "@/tools/tavily-search";

export async function POST(request: NextRequest) {
  try {
    const params: TavilySearchParams = await request.json();
    
    if (!params.query) {
      return new Response(
        JSON.stringify({ error: "Query parameter is required" }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }
    
    // If modelId is not provided, use a default identifier for direct API calls
    if (!params.modelId) {
      params.modelId = "direct-api-call";
    }
    
    const results = await searchTavily(params);
    
    return new Response(
      JSON.stringify(results),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error("Tavily API route error:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    return new Response(
      JSON.stringify({ error: `Tavily search failed: ${errorMessage}` }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}



================================================
File: app/tavily-ai-search/page.tsx
================================================
import { TavilyChat } from "@/components/tavily-chat";

export default function TavilySearchPage() {
  return (
    <div className="flex flex-col size-full items-center">
      <TavilyChat />
    </div>
  );
}



================================================
File: components/chat.tsx
================================================
"use client";

import cn from "classnames";
import { toast } from "sonner";
import { useChat } from "@ai-sdk/react";
import { useState, useRef } from "react";
import { Messages } from "./messages";
import { models } from "@/lib/models";
import { Footnote } from "./footnote";
import { ArrowUpIcon, CheckedSquare, StopIcon, UncheckedSquare, PaperClipIcon, XIcon } from "./icons";
import { ModelSelector } from "./model-selector";
import { Input } from "./input";
import Image from "next/image";

export function Chat() {
  const [input, setInput] = useState<string>("");
  const [selectedModelId, setSelectedModelId] = useState<string>("claude-3.7-sonnet");
  const [isReasoningEnabled, setIsReasoningEnabled] = useState<boolean>(true);
  const [files, setFiles] = useState<FileList | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Generate a unique chat ID for each page load to ensure proper reset
  const chatId = useRef<string>(`chat-${Date.now()}`).current;

  // Default values for the following features 
  const reasoningModeEnabled = true;
  const multimodalEnabled = true;

  const selectedModel = models.find((model) => model.id === selectedModelId);

  const { messages, append, status, stop } = useChat({
    id: chatId,
    body: {
      selectedModelId,
      isReasoningEnabled: reasoningModeEnabled ? isReasoningEnabled : false,
    },
    onError: () => {
      toast.error("An error occurred, please try again!");
    },
  });

  const isGeneratingResponse = ["streaming", "submitted"].includes(status);

  const handleSendMessage = () => {
    if (input === "" && (!files || files.length === 0)) {
      return;
    }

    if (isGeneratingResponse) {
      stop();
    } else {
      append({
        role: "user",
        content: input,
      }, {
        experimental_attachments: files || undefined,
      });
    }

    setInput("");
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleRemoveFile = () => {
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Create file preview URL
  const filePreviewUrl = files && files.length > 0 && files[0].type.startsWith('image/') 
    ? URL.createObjectURL(files[0]) 
    : null;

  return (
    <div
      className={cn(
        "px-4 md:px-0 pb-4 pt-8 flex flex-col h-dvh items-center w-full",
        {
          "justify-between": messages.length > 0,
          "justify-center gap-4": messages.length === 0,
        },
      )}
    >
      {messages.length > 0 ? (
        <Messages messages={messages} status={status} />
      ) : (
        <div className="flex flex-col gap-0.5 sm:text-2xl text-xl md:w-1/2 w-full">
          <div className="flex flex-row gap-2 items-center">
            <div>Trainnect AI.</div>
          </div>
          <div className="dark:text-zinc-500 text-zinc-400">
            Search Less, Learn More
          </div>
        </div>
      )}

      <div className="flex flex-col gap-4 md:w-1/2 w-full">
        <div className="w-full relative p-3 dark:bg-zinc-800 rounded-2xl flex flex-col gap-1 bg-zinc-100">
          {multimodalEnabled && files && files.length > 0 && (
            <div className="mb-2 flex items-center" data-testid="file-preview">
              {filePreviewUrl ? (
                <div className="relative w-16 h-16 mr-2">
                  <Image 
                    src={filePreviewUrl} 
                    alt={files[0].name}
                    fill
                    style={{ objectFit: 'cover' }}
                    className="rounded-md"
                  />
                </div>
              ) : (
                <div className="flex items-center justify-center w-16 h-16 bg-zinc-200 dark:bg-zinc-700 rounded-md mr-2">
                  <span className="text-xs">{files[0].name.split('.').pop()?.toUpperCase()}</span>
                </div>
              )}
              <div className="flex-1">
                <div className="text-sm truncate">{files[0].name}</div>
                <div className="text-xs text-zinc-500">{(files[0].size / 1024).toFixed(1)} KB</div>
              </div>
              <button 
                onClick={handleRemoveFile}
                className="p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700"
              >
                <XIcon className="h-4 w-4" />
              </button>
            </div>
          )}
          
          <Input
            input={input}
            setInput={setInput}
            selectedModelId={selectedModelId}
            isGeneratingResponse={isGeneratingResponse}
            isReasoningEnabled={reasoningModeEnabled ? isReasoningEnabled : false}
            append={append}
          />

          {reasoningModeEnabled && (
            <div className="absolute bottom-2.5 left-2.5">
              <div
                className={cn(
                  "relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-2 dark:hover:bg-zinc-600 hover:bg-zinc-200 cursor-pointer",
                  {
                    "dark:bg-zinc-600 bg-zinc-200": isReasoningEnabled,
                  },
                )}
                onClick={() => {
                  setIsReasoningEnabled(!isReasoningEnabled);
                }}
              >
                {isReasoningEnabled ? <CheckedSquare /> : <UncheckedSquare />}
                <div>Reasoning</div>
              </div>
            </div>
          )}

          <div className="absolute bottom-2.5 right-2.5 flex flex-row gap-2">
            {multimodalEnabled && (
              <button
                className="size-8 flex flex-row justify-center items-center dark:bg-zinc-700 bg-zinc-300 dark:text-zinc-300 text-zinc-700 p-1.5 rounded-full hover:bg-zinc-400 dark:hover:bg-zinc-600 hover:scale-105 active:scale-95 transition-all"
                onClick={() => fileInputRef.current?.click()}
              >
                <PaperClipIcon />
                <input
                  type="file"
                  className="hidden"
                  onChange={(e) => setFiles(e.target.files)}
                  ref={fileInputRef}
                  accept="image/*, application/pdf"
                  data-testid="file-upload"
                />
              </button>
            )}
            
            <ModelSelector 
              selectedModelId={selectedModelId}
              setSelectedModelId={setSelectedModelId}
            />

            <button
              className={cn(
                "size-8 flex flex-row justify-center items-center dark:bg-zinc-100 bg-zinc-900 dark:text-zinc-900 text-zinc-100 p-1.5 rounded-full hover:bg-zinc-800 dark:hover:bg-zinc-300 hover:scale-105 active:scale-95 transition-all",
                {
                  "dark:bg-zinc-200 dark:text-zinc-500":
                    isGeneratingResponse || (input === "" && (!files || files.length === 0)),
                },
              )}
              onClick={handleSendMessage}
              aria-label="send"
            >
              {isGeneratingResponse ? <StopIcon /> : <ArrowUpIcon />}
            </button>
          </div>
        </div>

        <Footnote />
      </div>
    </div>
  );
}



================================================
File: components/deploy-button.tsx
================================================
import Link from "next/link";
export const DeployButton = () => (
  <Link
    href={`https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel-labs%2Fai-sdk-preview-reasoning%2Ftree%2Fmain&env=ANTHROPIC_API_KEY&envDescription=Anthropic%20API%20key&envLink=https%3A%2F%2Fconsole.anthropic.com%2F`}
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center gap-2 ml-2 bg-black text-white text-sm px-3 py-1.5 rounded-md hover:bg-zinc-900 dark:bg-white dark:text-black dark:hover:bg-zinc-100"
  >
    <svg
      data-testid="geist-icon"
      height={14}
      strokeLinejoin="round"
      viewBox="0 0 16 16"
      width={14}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8 1L16 15H0L8 1Z"
        fill="currentColor"
      />
    </svg>
    Deploy
  </Link>
);



================================================
File: components/footnote.tsx
================================================
import Link from 'next/link';

export function Footnote() {
  return (
    <div className="text-xs text-zinc-400 leading-5 hidden sm:block">
      This app is built using{' '}
      <Link
        className="underline underline-offset-2"
        href="https://nextjs.org/"
        target="_blank"
      >
        Next.js
      </Link>{' '}
      15{' '}
      <Link
        className="underline underline-offset-2"
        href="https://sdk.vercel.ai/"
        target="_blank"
      >
        React 19
      </Link>
      . Trainnect, Search Less, Learn More{' '}
      <Link
        className="underline underline-offset-2"
        href="https://trainnect.com"
        target="_blank"
      >
        documentation
      </Link>
      .
    </div>
  );
}


================================================
File: components/icons.tsx
================================================
export const ArrowUpIcon = ({ size = 16 }: { size?: number }) => (
  <svg
    height={size}
    strokeLinejoin="round"
    viewBox="0 0 16 16"
    width={size}
    style={{ color: "currentcolor" }}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8.70711 1.39644C8.31659 1.00592 7.68342 1.00592 7.2929 1.39644L2.21968 6.46966L1.68935 6.99999L2.75001 8.06065L3.28034 7.53032L7.25001 3.56065V14.25V15H8.75001V14.25V3.56065L12.7197 7.53032L13.25 8.06065L14.3107 6.99999L13.7803 6.46966L8.70711 1.39644Z"
      fill="currentColor"
    ></path>
  </svg>
);

export const ChevronDownIcon = ({ size = 16 }: { size?: number }) => (
  <svg
    height={size}
    strokeLinejoin="round"
    viewBox="0 0 16 16"
    width={size}
    style={{ color: "currentcolor" }}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M12.0607 6.74999L11.5303 7.28032L8.7071 10.1035C8.31657 10.4941 7.68341 10.4941 7.29288 10.1035L4.46966 7.28032L3.93933 6.74999L4.99999 5.68933L5.53032 6.21966L7.99999 8.68933L10.4697 6.21966L11 5.68933L12.0607 6.74999Z"
      fill="currentColor"
    />
  </svg>
);

export const ChevronUpIcon = ({ size = 16 }: { size?: number }) => (
  <svg
    height={size}
    strokeLinejoin="round"
    viewBox="0 0 16 16"
    width={size}
    style={{ color: "currentcolor" }}
    className="rotate-0"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6.74999 3.93933L7.28032 4.46966L10.1035 7.29288C10.4941 7.68341 10.4941 8.31657 10.1035 8.7071L7.28032 11.5303L6.74999 12.0607L5.68933 11L6.21966 10.4697L8.68933 7.99999L6.21966 5.53032L5.68933 4.99999L6.74999 3.93933Z"
      fill="currentColor"
    ></path>
  </svg>
);

export const SpinnerIcon = ({ size = 16 }: { size?: number }) => (
  <svg
    height={size}
    strokeLinejoin="round"
    viewBox="0 0 16 16"
    width={size}
    style={{ color: "currentcolor" }}
  >
    <g clipPath="url(#clip0_2393_1490)">
      <path d="M8 0V4" stroke="currentColor" strokeWidth="1.5" />
      <path
        opacity="0.5"
        d="M8 16V12"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.9"
        d="M3.29773 1.52783L5.64887 4.7639"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.1"
        d="M12.7023 1.52783L10.3511 4.7639"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.4"
        d="M12.7023 14.472L10.3511 11.236"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.6"
        d="M3.29773 14.472L5.64887 11.236"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.2"
        d="M15.6085 5.52783L11.8043 6.7639"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.7"
        d="M0.391602 10.472L4.19583 9.23598"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.3"
        d="M15.6085 10.4722L11.8043 9.2361"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        opacity="0.8"
        d="M0.391602 5.52783L4.19583 6.7639"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </g>
    <defs>
      <clipPath id="clip0_2393_1490">
        <rect width="16" height="16" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

export const VercelIcon = ({ size = 17 }) => {
  return (
    <svg
      height={size}
      strokeLinejoin="round"
      viewBox="0 0 16 16"
      width={size}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8 1L16 15H0L8 1Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const StopIcon = ({ size = 16 }: { size?: number }) => {
  return (
    <svg
      height={size}
      viewBox="0 0 16 16"
      width={size}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3 3H13V13H3V3Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const CheckedSquare = ({ size = 16 }: { size?: number }) => {
  return (
    <svg
      height={size}
      strokeLinejoin="round"
      viewBox="0 0 16 16"
      width={size}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M15 16H1C0.447715 16 0 15.5523 0 15V1C0 0.447715 0.447716 0 1 0L15 8.17435e-06C15.5523 8.47532e-06 16 0.447724 16 1.00001V15C16 15.5523 15.5523 16 15 16ZM11.7803 6.28033L12.3107 5.75L11.25 4.68934L10.7197 5.21967L6.5 9.43935L5.28033 8.21967L4.75001 7.68934L3.68934 8.74999L4.21967 9.28033L5.96967 11.0303C6.11032 11.171 6.30109 11.25 6.5 11.25C6.69891 11.25 6.88968 11.171 7.03033 11.0303L11.7803 6.28033Z"
        fill="currentColor"
      ></path>
    </svg>
  );
};

export const UncheckedSquare = ({ size = 16 }: { size?: number }) => {
  return (
    <svg
      height={size}
      strokeLinejoin="round"
      viewBox="0 0 16 16"
      width={size}
      style={{ color: "currentcolor" }}
    >
      <rect
        x="1"
        y="1"
        width="14"
        height="14"
        stroke="currentColor"
        strokeWidth="1.5"
        fill="none"
      />
    </svg>
  );
};

export const PaperClipIcon = ({ size = 16, className = "" }: { size?: number, className?: string }) => {
  return (
    <svg
      height={size}
      width={size}
      viewBox="0 0 16 16"
      className={className}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8 1.5a.5.5 0 01.5.5v4.793l1.146-1.147a.5.5 0 01.708.708l-2 2a.5.5 0 01-.708 0l-2-2a.5.5 0 11.708-.708L7.5 6.793V2a.5.5 0 01.5-.5zM4 9.5a.5.5 0 00-1 0v2A2.5 2.5 0 005.5 14h5a2.5 2.5 0 002.5-2.5v-2a.5.5 0 00-1 0v2a1.5 1.5 0 01-1.5 1.5h-5A1.5 1.5 0 014 11.5v-2z"
        fill="currentColor"
      />
    </svg>
  );
};

export const XIcon = ({ size = 16, className = "" }: { size?: number, className?: string }) => {
  return (
    <svg
      height={size}
      width={size}
      viewBox="0 0 16 16"
      className={className}
      style={{ color: "currentcolor" }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12.0607 3.93934L8 8.00001L3.93934 3.93934L2.87868 5.00001L6.93934 9.06067L2.87868 13.1213L3.93934 14.182L8 10.1213L12.0607 14.182L13.1213 13.1213L9.06066 9.06067L13.1213 5.00001L12.0607 3.93934Z"
        fill="currentColor"
      />
    </svg>
  );
};

export function SearchIcon({ size = 16, className = "" }: { size?: number, className?: string }) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}



================================================
File: components/input.tsx
================================================
"use client";

import { toast } from "sonner";
import { Message, CreateMessage, ChatRequestOptions } from "ai";

interface InputProps {
  input: string;
  setInput: (value: string) => void;
  selectedModelId: string;
  isGeneratingResponse: boolean;
  isReasoningEnabled: boolean;
  append?: (message: Message | CreateMessage, chatRequestOptions?: ChatRequestOptions) => Promise<string | null | undefined>;
}

export function Input({
  input,
  setInput,
  selectedModelId,
  isGeneratingResponse,
  isReasoningEnabled,
  append,
}: InputProps) {

  return (
    <textarea
      className="mb-12 resize-none w-full min-h-12 outline-none bg-transparent placeholder:text-zinc-400"
      placeholder="Send a message"
      value={input}
      autoFocus
      onChange={(event) => {
        setInput(event.currentTarget.value);
      }}
      onKeyDown={(event) => {
        if (event.key === "Enter" && !event.shiftKey) {
          event.preventDefault();

          if (input === "") {
            return;
          }

          if (isGeneratingResponse) {
            toast.error("Please wait for the model to finish its response!");

            return;
          }

          if (append) {
            append({
              role: "user",
              content: input,
            });
          }

          setInput("");
        }
      }}
    />
  );
}



================================================
File: components/markdown-components.tsx
================================================
import { Components } from "react-markdown";
import Link from "next/link";

export const markdownComponents: Partial<Components> = {
  p: ({ children }) => <p className="leading-6">{children}</p>,
  pre: ({ children }) => <>{children}</>,
  ol: ({ children, ...props }) => {
    return (
      <ol className="list-decimal list-outside ml-4" {...props}>
        {children}
      </ol>
    );
  },
  li: ({ children, ...props }) => {
    return (
      <li className="py-1" {...props}>
        {children}
      </li>
    );
  },
  ul: ({ children, ...props }) => {
    return (
      <ul className="list-decimal list-outside ml-4" {...props}>
        {children}
      </ul>
    );
  },
  strong: ({ children, ...props }) => {
    return (
      <span className="font-semibold" {...props}>
        {children}
      </span>
    );
  },
  a: ({ children, ...props }) => {
    return (
      // @ts-expect-error - Link component expects href prop from markdown-parsed anchor tags
      <Link
        className="text-blue-500 hover:underline"
        target="_blank"
        rel="noreferrer"
        {...props}
      >
        {children}
      </Link>
    );
  },
  h1: ({ children, ...props }) => {
    return (
      <h1 className="text-3xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h1>
    );
  },
  h2: ({ children, ...props }) => {
    return (
      <h2 className="text-2xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h2>
    );
  },
  h3: ({ children, ...props }) => {
    return (
      <h3 className="text-xl font-semibold mt-6 mb-2" {...props}>
        {children}
      </h3>
    );
  },
  h4: ({ children, ...props }) => {
    return (
      <h4 className="text-lg font-semibold mt-6 mb-2" {...props}>
        {children}
      </h4>
    );
  },
  h5: ({ children, ...props }) => {
    return (
      <h5 className="text-base font-semibold mt-6 mb-2" {...props}>
        {children}
      </h5>
    );
  },
  h6: ({ children, ...props }) => {
    return (
      <h6 className="text-sm font-semibold mt-6 mb-2" {...props}>
        {children}
      </h6>
    );
  },
};



================================================
File: components/messages.tsx
================================================
"use client";

import cn from "classnames";
import Markdown from "react-markdown";
import { markdownComponents } from "./markdown-components";
import { AnimatePresence, motion } from "framer-motion";
import { useEffect, useMemo, useRef, useState } from "react";
import { ChevronDownIcon, ChevronUpIcon, SpinnerIcon } from "./icons";
import { UIMessage } from "ai";
import { UseChatHelpers } from "@ai-sdk/react";
import Image from "next/image";

interface ReasoningPart {
  type: "reasoning";
  reasoning: string;
  details: Array<{ type: "text"; text: string }>;
}

interface ReasoningMessagePartProps {
  part: ReasoningPart;
  isReasoning: boolean;
}

export function ReasoningMessagePart({
  part,
  isReasoning,
}: ReasoningMessagePartProps) {
  const [isExpanded, setIsExpanded] = useState(true);

  const variants = {
    collapsed: {
      height: 0,
      opacity: 0,
      marginTop: 0,
      marginBottom: 0,
    },
    expanded: {
      height: "auto",
      opacity: 1,
      marginTop: "1rem",
      marginBottom: 0,
    },
  };

  return (
    <div className="flex flex-col">
      {isReasoning ? (
        <div className="flex flex-row gap-2 items-center">
          <div className="font-medium text-sm">Reasoning</div>
          <div className="animate-spin">
            <SpinnerIcon />
          </div>
        </div>
      ) : (
        <div className="flex flex-row gap-2 items-center">
          <div className="font-medium text-sm">Reasoned for a few seconds</div>
          <button
            className={cn(
              "cursor-pointer rounded-full dark:hover:bg-zinc-800 hover:bg-zinc-200",
              {
                "dark:bg-zinc-800 bg-zinc-200": isExpanded,
              },
            )}
            onClick={() => {
              setIsExpanded(!isExpanded);
            }}
          >
            {isExpanded ? <ChevronDownIcon /> : <ChevronUpIcon />}
          </button>
        </div>
      )}

      <AnimatePresence initial={false}>
        {isExpanded && (
          <motion.div
            key="reasoning"
            className="text-sm dark:text-zinc-400 text-zinc-600 flex flex-col gap-4 border-l pl-3 dark:border-zinc-800"
            initial="collapsed"
            animate="expanded"
            exit="collapsed"
            variants={variants}
            transition={{ duration: 0.2, ease: "easeInOut" }}
          >
            {part.details.map((detail, detailIndex) =>
              detail.type === "text" ? (
                <Markdown key={detailIndex} components={markdownComponents}>
                  {detail.text}
                </Markdown>
              ) : (
                "<redacted>"
              ),
            )}

            {/* <Markdown components={markdownComponents}>{reasoning}</Markdown> */}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

interface TextMessagePartProps {
  text: string;
}

export function TextMessagePart({ text }: TextMessagePartProps) {
  return (
    <div className="flex flex-col gap-4">
      <Markdown components={markdownComponents}>{text}</Markdown>
    </div>
  );
}

interface AttachmentProps {
  attachment: {
    name?: string;
    url: string;
    contentType: string;
  };
  index: number;
  messageId: string;
}

export function Attachment({ attachment, index, messageId }: AttachmentProps) {
  if (attachment.contentType.startsWith('image/')) {
    return (
      <div className="mt-2 relative w-full max-w-md h-auto">
        <Image
          key={`${messageId}-${index}`}
          src={attachment.url}
          alt={attachment.name || `attachment-${index}`}
          width={500}
          height={300}
          className="rounded-md object-contain"
          style={{ maxHeight: '300px' }}
        />
      </div>
    );
  } else if (attachment.contentType.startsWith('application/pdf')) {
    return (
      <div className="mt-2 w-full max-w-md">
        <div className="bg-zinc-100 dark:bg-zinc-800 p-2 rounded-md flex items-center gap-2 mb-2">
          <div className="text-sm font-medium">PDF Document: {attachment.name || `Document-${index}`}</div>
        </div>
        <iframe
          key={`${messageId}-${index}`}
          src={attachment.url}
          title={attachment.name || `attachment-${index}`}
          className="w-full rounded-md border border-zinc-300 dark:border-zinc-700"
          height={400}
        />
      </div>
    );
  }
  
  return null;
}

interface MessagesProps {
  messages: Array<UIMessage>;
  status: UseChatHelpers["status"];
}

export function Messages({ messages, status }: MessagesProps) {
  const messagesRef = useRef<HTMLDivElement>(null);
  const messagesLength = useMemo(() => messages.length, [messages]);

  useEffect(() => {
    if (messagesRef.current) {
      messagesRef.current.scrollTop = messagesRef.current.scrollHeight;
    }
  }, [messagesLength]);

  return (
    <div
      className="flex flex-col gap-8 overflow-y-scroll items-center w-full"
      ref={messagesRef}
    >
      {messages.map((message) => (
        <div
          key={message.id}
          className={cn(
            "flex flex-col gap-4 last-of-type:mb-12 first-of-type:mt-16 md:w-1/2 w-full",
          )}
        >
          <div
            className={cn("flex flex-col gap-4", {
              "dark:bg-zinc-800 bg-zinc-200 p-2 rounded-xl w-fit ml-auto":
                message.role === "user",
              "": message.role === "assistant",
            })}
          >
            {/* Display message text content */}
            {message.parts.map((part, partIndex) => {
              if (part.type === "text") {
                return (
                  <TextMessagePart
                    key={`${message.id}-${partIndex}`}
                    text={part.text}
                  />
                );
              }

              if (part.type === "reasoning") {
                return (
                  <ReasoningMessagePart
                    key={`${message.id}-${partIndex}`}
                    // @ts-expect-error export ReasoningUIPart
                    part={part}
                    isReasoning={
                      status === "streaming" &&
                      partIndex === message.parts.length - 1
                    }
                  />
                );
              }
            })}
            
            {/* Display attachments if present */}
            {message.experimental_attachments && message.experimental_attachments.length > 0 && (
              <div className="flex flex-col gap-2">
                {message.experimental_attachments.map((attachment, attachmentIndex) => {
                  // Ensure attachment has required properties before rendering
                  if (attachment && attachment.url && attachment.contentType) {
                    return (
                      <Attachment 
                        key={`${message.id}-attachment-${attachmentIndex}`}
                        attachment={{
                          name: attachment.name,
                          url: attachment.url,
                          contentType: attachment.contentType
                        }}
                        index={attachmentIndex}
                        messageId={message.id}
                      />
                    );
                  }
                  return null;
                })}
              </div>
            )}
          </div>
        </div>
      ))}

      {status === "submitted" && (
        <div className="text-zinc-500 mb-12 md:w-1/2 w-full">Hmm...</div>
      )}
    </div>
  );
}



================================================
File: components/model-selector.tsx
================================================
"use client";

import { useState, useRef, useEffect } from "react";
import cn from "classnames";
import { models } from "@/lib/models";
import { ChevronDownIcon } from "./icons";

interface ModelSelectorProps {
  selectedModelId: string;
  setSelectedModelId: (modelId: string) => void;
}

export function ModelSelector({
  selectedModelId,
  setSelectedModelId,
}: ModelSelectorProps) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  const selectedModel = models.find((model) => model.id === selectedModelId);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        className="relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-0.5 dark:hover:bg-zinc-700 hover:bg-zinc-200 cursor-pointer"
        onClick={() => setIsOpen(!isOpen)}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <div>
          {selectedModel ? selectedModel.name : "Models Unavailable!"}
        </div>
        <div className="text-zinc-500">
          <ChevronDownIcon />
        </div>
      </button>

      {isOpen && (
        <div className="absolute bottom-full mb-2 right-0 w-64 max-h-80 overflow-y-auto bg-white dark:bg-zinc-800 rounded-lg shadow-lg z-10">
          <ul
            className="py-1"
            role="listbox"
            aria-labelledby="model-selector"
          >
            {models.map((model) => (
              <li
                key={model.id}
                className={cn(
                  "px-4 py-2 cursor-pointer hover:bg-zinc-100 dark:hover:bg-zinc-700",
                  {
                    "bg-zinc-100 dark:bg-zinc-700": model.id === selectedModelId,
                  }
                )}
                role="option"
                aria-selected={model.id === selectedModelId}
                onClick={() => {
                  setSelectedModelId(model.id);
                  setIsOpen(false);
                }}
              >
                <div className="font-medium">{model.name}</div>
                <div className="text-xs text-zinc-500 dark:text-zinc-400 line-clamp-2">
                  {model.description}
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}



================================================
File: components/navigation.tsx
================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { SearchIcon } from "./icons";
import cn from "classnames";

export function Navigation() {
  const pathname = usePathname();
  
  return (
    <div className="fixed top-4 right-4 z-10 flex gap-2">
      <Link
        href="/"
        className={cn(
          "p-2 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors",
          {
            "bg-zinc-200 dark:bg-zinc-700": pathname === "/",
          }
        )}
        aria-label="Home"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
          <polyline points="9 22 9 12 15 12 15 22" />
        </svg>
      </Link>
      
      <Link
        href="/tavily-ai-search"
        className={cn(
          "p-2 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors",
          {
            "bg-zinc-200 dark:bg-zinc-700": pathname === "/tavily-ai-search",
          }
        )}
        aria-label="Tavily AI Search"
      >
        <SearchIcon size={24} />
      </Link>
    </div>
  );
}



================================================
File: components/new-chat-button.tsx
================================================
"use client";

import { PlusCircle } from "lucide-react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";
import { useSidebar } from "./sidebar";
import { createClient } from "@/utils/supabase/client";
import { toast } from "sonner";

export function NewChatButton() {
  const { open } = useSidebar();
  const router = useRouter();
  const supabase = createClient();

  const handleNewChat = async () => {
    try {
      // Get the current user
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError || !userData.user) {
        console.error('User not authenticated:', userError);
        toast.error("You must be logged in to create a new chat");
        return;
      }
      
      // Create a new chat session in Supabase
      const { data, error } = await supabase
        .from('chat_sessions')
        .insert([
          {
            title: "New Chat",
            user_id: userData.user.id,
          },
        ])
        .select()
        .single();
      
      if (error) {
        console.error('Error creating chat session:', error);
        toast.error("Failed to start a new chat");
        return;
      }
      
      // Force a refresh of the current page to reset the chat state
      router.refresh();
      
      // Show success message
      toast.success("Started a new chat");
    } catch (error) {
      console.error("Error creating new chat:", error);
      toast.error("Failed to start a new chat");
    }
  };

  return (
    <button
      onClick={handleNewChat}
      className={cn(
        "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors"
      )}
    >
      <PlusCircle size={20} />
      <motion.span
        animate={{
          opacity: open ? 1 : 0,
          transition: { duration: 0.2 },
        }}
        className="text-sm whitespace-pre"
      >
        New Chat
      </motion.span>
    </button>
  );
}



================================================
File: components/sidebar.tsx
================================================
"use client";

import React, { useState } from "react";
import { cn } from "@/lib/utils";
import Link from "next/link";
import { motion } from "framer-motion";
import { 
  LayoutDashboard, 
  Search,
  MessageSquare,
  Menu,
  X
} from "lucide-react";
import { ChatHistoryDropdown } from "./chat-history/chat-history-dropdown";

interface SidebarLinkProps {
  label: string;
  href: string;
  icon: React.ReactNode;
}

interface SidebarProps {
  open?: boolean;
  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
  children: React.ReactNode;
}

interface SidebarBodyProps extends React.ComponentProps<typeof motion.div> {
  className?: string;
  children: React.ReactNode;
}

interface SidebarLinkComponentProps {
  link: SidebarLinkProps;
  className?: string;
}

const SidebarContext = React.createContext<{
  open: boolean;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
  animate: boolean;
} | null>(null);

export const useSidebar = () => {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider");
  }
  return context;
};

export const SidebarProvider = ({
  children,
  open: openProp,
  setOpen: setOpenProp,
  animate = true,
}: {
  children: React.ReactNode;
  open?: boolean;
  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
  animate?: boolean;
}) => {
  const [openState, setOpenState] = useState(false);

  const open = openProp !== undefined ? openProp : openState;
  const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;

  return (
    <SidebarContext.Provider value={{ open, setOpen, animate }}>
      {children}
    </SidebarContext.Provider>
  );
};

export const Sidebar = ({ children, open, setOpen }: SidebarProps) => {
  return (
    <SidebarProvider open={open} setOpen={setOpen}>
      {children}
    </SidebarProvider>
  );
};

export const SidebarBody = ({ className, children, ...props }: SidebarBodyProps) => {
  const { open, setOpen, animate } = useSidebar();

  return (
    <>
      <motion.div
        {...props}
        animate={{
          width: open ? "240px" : "80px",
          transition: {
            duration: animate ? 0.2 : 0,
          },
        }}
        className={cn(
          "border-r border-border bg-background fixed h-screen flex flex-col p-3 gap-3",
          className
        )}
      >
        <div className="flex items-center justify-between h-12">
          <Logo />
          <button
            onClick={() => setOpen(!open)}
            className="h-8 w-8 flex items-center justify-center rounded-md hover:bg-accent"
          >
            {open ? <X size={16} /> : <Menu size={16} />}
          </button>
        </div>
        {children}
      </motion.div>
      <div
        style={{
          width: open ? "240px" : "80px",
          transition: animate ? "width 0.2s" : "none",
        }}
      />
    </>
  );
};

export const SidebarLink = ({
  link,
  className,
}: SidebarLinkComponentProps) => {
  const { open } = useSidebar();

  return (
    <Link
      href={link.href}
      className={cn(
        "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors",
        className
      )}
    >
      {link.icon}
      <motion.span
        animate={{
          opacity: open ? 1 : 0,
          transition: { duration: 0.2 },
        }}
        className="text-sm whitespace-pre"
      >
        {link.label}
      </motion.span>
    </Link>
  );
};

export const Logo = () => {
  const { open } = useSidebar();
  
  return (
    <Link
      href="/"
      className="font-normal flex space-x-2 items-center text-sm text-foreground py-1 relative z-20"
    >
      <div className="h-5 w-6 bg-primary rounded-br-lg rounded-tr-sm rounded-tl-lg rounded-bl-sm flex-shrink-0" />
      {open && (
        <motion.span
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="font-medium text-foreground whitespace-pre"
        >
          Trainnect AI
        </motion.span>
      )}
    </Link>
  );
};

// Export ChatHistoryDropdown for use in other components
export { ChatHistoryDropdown };



================================================
File: components/star-button.tsx
================================================
import Link from "next/link";
import * as React from "react";
import type { SVGProps } from "react";

const Github = (props: SVGProps<SVGSVGElement>) => (
  <svg
    viewBox="0 0 256 250"
    width="1em"
    height="1em"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    preserveAspectRatio="xMidYMid"
    {...props}
  >
    <path d="M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z" />
  </svg>
);

export function StarButton() {
  return (
    <Link
      href="https://github.com/vercel-labs/ai-sdk-preview-reasoning"
      target="_blank"
      rel="noopener noreferrer"
      className="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-300 hover:text-zinc-700 dark:hover:text-zinc-300"
    >
      <Github className="size-4" />
      <span className="hidden sm:inline">Star on GitHub</span>
    </Link>
  );
}



================================================
File: components/tavily-chat.tsx
================================================
"use client";

import cn from "classnames";
import { toast } from "sonner";
import { useChat } from "@ai-sdk/react";
import { useState, useRef } from "react";
import { Messages } from "./messages";
import { models } from "@/lib/models";
import { Footnote } from "./footnote";
import { ArrowUpIcon, CheckedSquare, StopIcon, UncheckedSquare, PaperClipIcon, XIcon, SearchIcon } from "./icons";
import { ModelSelector } from "./model-selector";
import { Input } from "./input";
import Image from "next/image";

export function TavilyChat() {
  const [input, setInput] = useState<string>("");
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [selectedModelId, setSelectedModelId] = useState<string>("claude-3.7-sonnet");
  const [isReasoningEnabled, setIsReasoningEnabled] = useState<boolean>(true);
  const [files, setFiles] = useState<FileList | null>(null);
  const [isSearching, setIsSearching] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Default values for the following features 
  const reasoningModeEnabled = true;
  const multimodalEnabled = true;

  const selectedModel = models.find((model) => model.id === selectedModelId);

  const { messages, append, status, stop } = useChat({
    id: "tavily-search",
    api: "/api/tavily-chat",
    body: {
      selectedModelId,
      isReasoningEnabled: reasoningModeEnabled ? isReasoningEnabled : false,
      searchQuery: isSearching ? input : undefined,
    },
    onError: () => {
      toast.error("An error occurred, please try again!");
    },
  });

  const isGeneratingResponse = ["streaming", "submitted"].includes(status);

  const handleSendMessage = () => {
    if (input === "" && (!files || files.length === 0)) {
      return;
    }

    if (isGeneratingResponse) {
      stop();
    } else {
      append({
        role: "user",
        content: input,
      }, {
        experimental_attachments: files || undefined,
      });
    }

    setInput("");
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleRemoveFile = () => {
    setFiles(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Create file preview URL
  const filePreviewUrl = files && files.length > 0 && files[0].type.startsWith('image/') 
    ? URL.createObjectURL(files[0]) 
    : null;

  return (
    <div
      className={cn(
        "px-4 md:px-0 pb-4 pt-8 flex flex-col h-dvh items-center w-full",
        {
          "justify-between": messages.length > 0,
          "justify-center gap-4": messages.length === 0,
        },
      )}
    >
      {messages.length > 0 ? (
        <Messages messages={messages} status={status} />
      ) : (
        <div className="flex flex-col gap-0.5 sm:text-2xl text-xl md:w-1/2 w-full">
          <div className="flex flex-row gap-2 items-center">
            <div>Trainnect AI with Tavily Search</div>
          </div>
          <div className="dark:text-zinc-500 text-zinc-400">
            Search Less, Learn More with Web-Enhanced AI
          </div>
        </div>
      )}

      <div className="flex flex-col gap-4 md:w-1/2 w-full">
        <div className="w-full relative p-3 dark:bg-zinc-800 rounded-2xl flex flex-col gap-1 bg-zinc-100">
          {multimodalEnabled && files && files.length > 0 && (
            <div className="mb-2 flex items-center" data-testid="file-preview">
              {filePreviewUrl ? (
                <div className="relative w-16 h-16 mr-2">
                  <Image 
                    src={filePreviewUrl} 
                    alt={files[0].name}
                    fill
                    style={{ objectFit: 'cover' }}
                    className="rounded-md"
                  />
                </div>
              ) : (
                <div className="flex items-center justify-center w-16 h-16 bg-zinc-200 dark:bg-zinc-700 rounded-md mr-2">
                  <span className="text-xs">{files[0].name.split('.').pop()?.toUpperCase()}</span>
                </div>
              )}
              <div className="flex-1">
                <div className="text-sm truncate">{files[0].name}</div>
                <div className="text-xs text-zinc-500">{(files[0].size / 1024).toFixed(1)} KB</div>
              </div>
              <button 
                onClick={handleRemoveFile}
                className="p-1 rounded-full hover:bg-zinc-200 dark:hover:bg-zinc-700"
              >
                <XIcon className="h-4 w-4" />
              </button>
            </div>
          )}
          
          <Input
            input={input}
            setInput={setInput}
            selectedModelId={selectedModelId}
            isGeneratingResponse={isGeneratingResponse}
            isReasoningEnabled={reasoningModeEnabled ? isReasoningEnabled : false}
            append={append}
          />

          <div className="absolute bottom-2.5 left-2.5 flex flex-row gap-2">
            {reasoningModeEnabled && (
              <div
                className={cn(
                  "relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-2 dark:hover:bg-zinc-600 hover:bg-zinc-200 cursor-pointer",
                  {
                    "dark:bg-zinc-600 bg-zinc-200": isReasoningEnabled,
                  },
                )}
                onClick={() => {
                  setIsReasoningEnabled(!isReasoningEnabled);
                }}
              >
                {isReasoningEnabled ? <CheckedSquare /> : <UncheckedSquare />}
                <div>Reasoning</div>
              </div>
            )}
            
            <div
              className={cn(
                "relative w-fit text-sm p-1.5 rounded-lg flex flex-row items-center gap-2 dark:hover:bg-zinc-600 hover:bg-zinc-200 cursor-pointer",
                {
                  "dark:bg-zinc-600 bg-zinc-200": isSearching,
                },
              )}
              onClick={() => {
                setIsSearching(!isSearching);
              }}
            >
              {isSearching ? <CheckedSquare /> : <UncheckedSquare />}
              <div>Web Search</div>
            </div>
          </div>

          <div className="absolute bottom-2.5 right-2.5 flex flex-row gap-2">
            {multimodalEnabled && (
              <button
                className="size-8 flex flex-row justify-center items-center dark:bg-zinc-700 bg-zinc-300 dark:text-zinc-300 text-zinc-700 p-1.5 rounded-full hover:bg-zinc-400 dark:hover:bg-zinc-600 hover:scale-105 active:scale-95 transition-all"
                onClick={() => fileInputRef.current?.click()}
              >
                <PaperClipIcon />
                <input
                  type="file"
                  className="hidden"
                  onChange={(e) => setFiles(e.target.files)}
                  ref={fileInputRef}
                  accept="image/*, application/pdf"
                  data-testid="file-upload"
                />
              </button>
            )}
            
            <ModelSelector 
              selectedModelId={selectedModelId}
              setSelectedModelId={setSelectedModelId}
            />

            <button
              className={cn(
                "size-8 flex flex-row justify-center items-center dark:bg-zinc-100 bg-zinc-900 dark:text-zinc-900 text-zinc-100 p-1.5 rounded-full hover:bg-zinc-800 dark:hover:bg-zinc-300 hover:scale-105 active:scale-95 transition-all",
                {
                  "dark:bg-zinc-200 dark:text-zinc-500":
                    isGeneratingResponse || (input === "" && (!files || files.length === 0)),
                },
              )}
              onClick={handleSendMessage}
              aria-label="send"
            >
              {isGeneratingResponse ? <StopIcon /> : <ArrowUpIcon />}
            </button>
          </div>
        </div>

        <Footnote />
      </div>
    </div>
  );
}



================================================
File: components/ai-agents/agent-chat.tsx
================================================
'use client';

import { useState } from 'react';
import { useChat } from '@ai-sdk/react';
import { ModelConfig, AVAILABLE_MODELS } from '@/lib/ai-agents/types';
import { cn } from '@/lib/utils';
import type { Message } from 'ai';

interface ToolCall {
  id: string;
  type: 'function';
  function: {
    name: string;
    arguments: string;
  };
}

interface ExtendedMessage extends Message {
  toolCalls?: ToolCall[];
}

interface AgentChatProps {
  className?: string;
}

function ModelSelect({ 
  label, 
  value, 
  onChange, 
  models = AVAILABLE_MODELS 
}: { 
  label: string; 
  value: ModelConfig; 
  onChange: (model: ModelConfig) => void; 
  models?: ModelConfig[]; 
}) {
  return (
    <div className="flex-1">
      <label className="block text-sm font-medium mb-1">{label}</label>
      <select
        className="w-full p-2 rounded-md border bg-background"
        value={value.model}
        onChange={(e) => {
          const model = models.find(m => m.model === e.target.value);
          if (model) onChange(model);
        }}
      >
        {models.map((model) => (
          <option key={model.model} value={model.model}>
            {model.label} ({model.provider})
          </option>
        ))}
      </select>
    </div>
  );
}

export function AgentChat({ className }: AgentChatProps) {
  const [primaryModel, setPrimaryModel] = useState<ModelConfig>(AVAILABLE_MODELS[0]);
  const [secondaryModel, setSecondaryModel] = useState<ModelConfig>(AVAILABLE_MODELS[1]);

  const { messages, input, handleInputChange, handleSubmit, isLoading } = useChat({
    api: '/api/ai-agents',
    body: {
      primaryModel,
      secondaryModel,
    },
  });

  return (
    <div className={cn('flex flex-col h-[calc(100vh-12rem)]', className)}>
      <div className="flex gap-4 mb-4">
        <ModelSelect
          label="Primary Model (Research)"
          value={primaryModel}
          onChange={setPrimaryModel}
        />
        <ModelSelect
          label="Secondary Model (Processing)"
          value={secondaryModel}
          onChange={setSecondaryModel}
        />
      </div>

      <div className="flex-1 overflow-auto border rounded-md p-4 mb-4">
        {messages.map((message) => {
          const extendedMessage = message as ExtendedMessage;
          return (
            <div
              key={message.id}
              className={cn(
                'mb-4 last:mb-0',
                message.role === 'assistant' ? 'pl-4 border-l-2' : ''
              )}
            >
              <div className="font-medium mb-1">
                {message.role === 'user' ? 'You' : 'Assistant'}:
              </div>
              <div className="whitespace-pre-wrap">
                {message.content}
                {extendedMessage.role === 'assistant' && extendedMessage.toolCalls?.map((tool, index) => (
                  <div key={index} className="bg-muted p-2 rounded my-2 text-sm font-mono">
                    <div className="font-medium">Tool Call: {tool.function.name}</div>
                    <pre className="mt-1">
                      {JSON.stringify(JSON.parse(tool.function.arguments), null, 2)}
                    </pre>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
        {isLoading && (
          <div className="flex items-center justify-center py-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
          </div>
        )}
      </div>

      <form onSubmit={handleSubmit} className="flex gap-2">
        <input
          value={input}
          onChange={handleInputChange}
          placeholder="Send a message..."
          className="flex-1 p-2 rounded-md border bg-background"
        />
        <button
          type="submit"
          disabled={isLoading}
          className={cn(
            'px-4 py-2 rounded-md bg-primary text-primary-foreground',
            'hover:bg-primary/90 transition-colors',
            'disabled:opacity-50 disabled:cursor-not-allowed'
          )}
        >
          Send
        </button>
      </form>
    </div>
  );
}



================================================
File: components/chat-history/chat-history-dropdown.tsx
================================================
"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { History, Trash2, Copy, MoreVertical } from "lucide-react";
import { cn } from "@/lib/utils";
import { useSidebar } from "../sidebar";
import { ChatSession, TimeFilter } from "@/lib/types/chat-history";
import { createClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

interface ChatHistoryDropdownProps {
  className?: string;
}

export function ChatHistoryDropdown({ className }: ChatHistoryDropdownProps) {
  const { open } = useSidebar();
  const [isOpen, setIsOpen] = useState(false);
  const [timeFilter, setTimeFilter] = useState<TimeFilter>('all');
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    if (isOpen) {
      fetchChatSessions();
    }
  }, [isOpen, timeFilter]);

  const fetchChatSessions = async () => {
    setIsLoading(true);
    try {
      // Convert days to milliseconds
      let fromDate: string | null = null;
      if (timeFilter !== 'all') {
        const daysInMs = parseInt(timeFilter) * 24 * 60 * 60 * 1000;
        fromDate = new Date(Date.now() - daysInMs).toISOString();
      }
      
      let query = supabase
        .from('chat_sessions')
        .select('*')
        .order('updated_at', { ascending: false });
      
      if (fromDate) {
        query = query.gte('updated_at', fromDate);
      }
      
      const { data, error } = await query;
      
      if (error) {
        console.error('Error fetching chat sessions:', error);
        toast.error('Failed to load chat history');
        return;
      }
      
      setChatSessions(data as ChatSession[]);
    } catch (error) {
      console.error('Error in fetchChatSessions:', error);
      toast.error('Failed to load chat history');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteSession = async (sessionId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.stopPropagation();
    
    try {
      // Delete all messages in the session first
      await supabase
        .from('chat_messages')
        .delete()
        .eq('session_id', sessionId);
      
      // Then delete the session
      await supabase
        .from('chat_sessions')
        .delete()
        .eq('id', sessionId);
      
      // Update the local state
      setChatSessions((prev: ChatSession[]) => prev.filter((session: ChatSession) => session.id !== sessionId));
      toast.success('Chat session deleted');
    } catch (error) {
      console.error('Error deleting chat session:', error);
      toast.error('Failed to delete chat session');
    }
  };

  const handleCopyToClipboard = async (sessionId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.stopPropagation();
    
    try {
      const { data, error } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('session_id', sessionId)
        .order('created_at', { ascending: true });
      
      if (error) {
        throw error;
      }
      
      const formattedChat = data.map((msg: any) => 
        `${msg.role === 'user' ? 'You' : 'Assistant'}: ${msg.content}`
      ).join('\n\n');
      
      // Create a temporary textarea element to copy text
      const textArea = document.createElement('textarea');
      textArea.value = formattedChat;
      // Make the textarea out of viewport
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        // Use the older document.execCommand method which has better browser support
        const success = document.execCommand('copy');
        if (success) {
          toast.success('Chat copied to clipboard');
        } else {
          toast.error('Failed to copy chat to clipboard');
        }
      } catch (err) {
        console.error('Error copying text: ', err);
        toast.error('Failed to copy chat to clipboard');
      } finally {
        document.body.removeChild(textArea);
      }
    } catch (error) {
      console.error('Error copying chat to clipboard:', error);
      toast.error('Failed to copy chat to clipboard');
    }
  };

  const handleSessionClick = (sessionId: string) => {
    // Implement logic to restore chat session
    router.push(`/chat/${sessionId}`);
  };

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className={cn("relative", className)}>
      <button
        onClick={toggleDropdown}
        className={cn(
          "flex items-center gap-2 text-muted-foreground hover:text-foreground px-3 py-2 rounded-md hover:bg-accent transition-colors w-full"
        )}
      >
        {open && <History size={18} />}
        {open && (
          <motion.span
            animate={{
              opacity: open ? 1 : 0,
              transition: { duration: 0.2 },
            }}
            className="text-sm whitespace-pre flex-1 text-left"
          >
            Recent
          </motion.span>
        )}
      </button>

      {isOpen && open && (
        <div className="flex flex-col w-full">
          {/* 7d Filter */}
          <button
            onClick={() => setTimeFilter('7')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '7' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 7 days</span>
          </button>

          {/* 14d Filter */}
          <button
            onClick={() => setTimeFilter('14')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '14' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 14 days</span>
          </button>

          {/* 30d Filter */}
          <button
            onClick={() => setTimeFilter('30')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === '30' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>Last 30 days</span>
          </button>

          {/* All Filter */}
          <button
            onClick={() => setTimeFilter('all')}
            className={cn(
              "flex items-center gap-2 px-3 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full",
              timeFilter === 'all' && "text-foreground bg-accent/50"
            )}
          >
            <div className="w-4"></div> {/* Spacer for indentation */}
            <History size={14} />
            <span>All history</span>
          </button>

          {/* Chat Sessions */}
          {isLoading ? (
            <div className="flex justify-center items-center py-4">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
            </div>
          ) : chatSessions.length === 0 ? (
            <div className="px-8 py-4 text-sm text-muted-foreground">
              No chat history found
            </div>
          ) : (
            <div className="flex flex-col">
              {chatSessions.map((session: ChatSession) => (
                <div
                  key={session.id}
                  onClick={() => handleSessionClick(session.id)}
                  className="flex items-center gap-2 px-8 py-2 text-sm text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full cursor-pointer group"
                >
                  <span className="truncate flex-1">{session.title || 'Untitled Chat'}</span>
                  <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button
                      onClick={(e) => handleCopyToClipboard(session.id, e)}
                      className="text-muted-foreground hover:text-foreground p-1 rounded-md hover:bg-background"
                    >
                      <Copy size={14} />
                    </button>
                    <button
                      onClick={(e) => handleDeleteSession(session.id, e)}
                      className="text-muted-foreground hover:text-destructive p-1 rounded-md hover:bg-background"
                    >
                      <Trash2 size={14} />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}



================================================
File: lib/models.ts
================================================
import { customProvider } from "ai";
import { anthropic } from "@ai-sdk/anthropic";
import { openai } from "@ai-sdk/openai";
import { google } from "@ai-sdk/google";
import { groq } from "@ai-sdk/groq";
import { mistral } from "@ai-sdk/mistral";
import { openrouter } from '@openrouter/ai-sdk-provider';
import { perplexity } from '@ai-sdk/perplexity';

export const myProvider = customProvider({
  languageModels: {
    "claude-3.7-sonnet": anthropic("claude-3-7-sonnet-20250219"),
    "claude-3.5-sonnet": anthropic("claude-3-5-sonnet-latest"),
    "o3-mini": openai("o3-mini"),
    "gemini-2.0-flash": google("gemini-2.0-flash"),
    "qwen-qwq-32b": groq("qwen-qwq-32b"),
    "codestral-latest": mistral("codestral-latest"),
    "perplexity sonar": perplexity("sonar"),
    "google/gemini-2.0-flash-thinking-exp:free": openrouter("google/gemini-2.0-flash-thinking-exp:free"),
  },
});

// Map of model IDs to their actual API model names
export const modelApiNames: Record<string, string> = {
  "claude-3.7-sonnet": "claude-3-7-sonnet-20250219",
  "claude-3.5-sonnet": "claude-3-5-sonnet-latest",
  "o3-mini": "o3-mini",
  "gemini-2.0-flash": "gemini-2.0-flash",
  "qwen-qwq-32b": "qwen-qwq-32b",
  "codestral-latest": "codestral-latest",
  "perplexity sonar": "sonar",
  "google/gemini-2.0-flash-thinking-exp:free": "google/gemini-2.0-flash-thinking-exp:free",
};

interface Model {
  id: string;
  name: string;
  description: string;
}

export const models: Array<Model> = [
  {
    id: "claude-3.7-sonnet",
    name: "Claude 3.7 Sonnet",
    description:
      "Claude 3.7 Sonnet is Anthropic's most intelligent model to date and the first Claude model to offer extended thinking – the ability to solve complex problems with careful, step-by-step reasoning.",
  },
  {
    id: "claude-3.5-sonnet",
    name: "Claude 3.5 Sonnet",
    description:
      "Claude 3.5 Sonnet strikes the ideal balance between intelligence and speed—particularly for enterprise workloads.",
  },
  {
    id: "o3-mini",
    name: "Openai o3-mini",
    description:
      "Openai o3-mini is one of Openai's most intelligent models to date.",
  },
  {
    id: "gemini-2.0-flash",
    name: "Gemini 2.0 Flash",
    description:
      "Gemini 2.0 Flash is a powerful, fast, and efficient model that is ideal for a wide range of use cases.",
  },
  {
    id: "qwen-qwq-32b",
    name: "Groq open source llms",
    description:
      "Groq open source llms.",
  },
  {
    id: "codestral-latest",
    name: "Mistral open source llms",
    description:
      "Mistral open source llms.",
  },
  {
    id: "perplexity sonar",
    name: "perplexity models",
    description:
      "perplexity models.",
  },
  {
    id: "google/gemini-2.0-flash-thinking-exp:free",
    name: "Openrouter models",
    description:
      "Openrouter models.",
  },
];


================================================
File: lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
File: lib/__tests__/api.test.ts
================================================
import { NextRequest } from 'next/server';
import { streamText } from 'ai';

// Mock the POST handler
const mockPost = jest.fn();

// Mock the streamText function
jest.mock('ai', () => ({
  streamText: jest.fn()
}));

// Mock the models
jest.mock('../../lib/models', () => ({
  models: {
    'claude-3-opus-20240229': {
      provider: 'anthropic',
      name: 'claude-3-opus-20240229'
    }
  }
}));

// Mock the route module
jest.mock('../../app/api/chat/route', () => ({
  POST: mockPost
}));

describe('API Route', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementation for streamText
    (streamText as jest.Mock).mockImplementation(() => {
      return Promise.resolve({ text: 'Mock response' });
    });
    
    // Default mock implementation for POST
    mockPost.mockImplementation(async (req: NextRequest) => {
      const body = await req.json();
      const { messages, model } = body;
      
      if (model !== 'claude-3-opus-20240229') {
        return new Response(JSON.stringify({ error: 'Invalid model' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      return streamText({
        model,
        messages,
        temperature: 0.7,
      });
    });
  });
  
  test('handles request with reasoning enabled', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'claude-3-opus-20240229',
        reasoning: true
      })
    });
    
    await mockPost(req);
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'claude-3-opus-20240229',
      messages: [{ role: 'user', content: 'Hello' }],
      temperature: 0.7,
    }));
  });
  
  test('handles request with reasoning disabled', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'claude-3-opus-20240229',
        reasoning: false
      })
    });
    
    await mockPost(req);
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'claude-3-opus-20240229',
      messages: [{ role: 'user', content: 'Hello' }],
      temperature: 0.7,
    }));
  });
  
  test('handles invalid model ID', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Hello' }],
        model: 'invalid-model',
        reasoning: true
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(data).toEqual({ error: 'Invalid model' });
    expect(streamText).not.toHaveBeenCalled();
  });
}); 


================================================
File: lib/__tests__/models.test.ts
================================================
const { myProvider, models } = require("../models");

// This is a simple test file to verify that each model is properly configured
// and can be used with the Vercel AI SDK.

// Mock the models
jest.mock('../models', () => {
  return {
    myProvider: {
      languageModel: jest.fn((modelId) => ({ id: modelId })),
    },
    models: [
      { id: 'claude-3.7-sonnet', name: 'Claude 3.7 Sonnet', description: 'Test description' },
      { id: 'claude-3.5-sonnet', name: 'Claude 3.5 Sonnet', description: 'Test description' },
      { id: 'o3-mini', name: 'Openai o3-mini', description: 'Test description' },
      { id: 'gemini-2.0-flash', name: 'Gemini 2.0 Flash', description: 'Test description' },
      { id: 'qwen-qwq-32b', name: 'Groq open source llms', description: 'Test description' },
      { id: 'codestral-latest', name: 'Mistral open source llms', description: 'Test description' },
      { id: 'perplexity sonar', name: 'perplexity models', description: 'Test description' },
      { id: 'google/gemini-2.0-flash-thinking-exp:free', name: 'Openrouter models', description: 'Test description' },
    ],
    modelApiNames: {
      'claude-3.7-sonnet': 'claude-3-7-sonnet-20250219',
      'claude-3.5-sonnet': 'claude-3-5-sonnet-latest',
      'o3-mini': 'o3-mini',
      'gemini-2.0-flash': 'gemini-2.0-flash',
      'qwen-qwq-32b': 'qwen-qwq-32b',
      'codestral-latest': 'codestral-latest',
      'perplexity sonar': 'perplexity sonar',
      'google/gemini-2.0-flash-thinking-exp:free': 'google/gemini-2.0-flash-thinking-exp:free',
    },
  };
});

// Restore console methods after all tests
afterAll(() => {
  if (global.originalConsoleError) {
    console.error = global.originalConsoleError;
  }
  if (global.originalConsoleWarn) {
    console.warn = global.originalConsoleWarn;
  }
});

describe("Model Configuration Tests", () => {
  // Test that all models in the models array have corresponding entries in myProvider
  test("All models should have corresponding provider configurations", () => {
    for (const model of models) {
      expect(() => {
        // This should not throw an error if the model is properly configured
        const languageModel = myProvider.languageModel(model.id);
        expect(languageModel).toBeDefined();
      }).not.toThrow();
    }
  });

  // Test specific model configurations
  test("Claude models should be configured correctly", () => {
    const claudeModels = models.filter(model => model.id.startsWith("claude"));
    expect(claudeModels.length).toBeGreaterThan(0);
    
    for (const model of claudeModels) {
      const languageModel = myProvider.languageModel(model.id);
      expect(languageModel).toBeDefined();
    }
  });

  test("OpenAI models should be configured correctly", () => {
    const openaiModels = models.filter(model => model.id.startsWith("o3"));
    expect(openaiModels.length).toBeGreaterThan(0);
    
    for (const model of openaiModels) {
      const languageModel = myProvider.languageModel(model.id);
      expect(languageModel).toBeDefined();
    }
  });

  test("Google models should be configured correctly", () => {
    const googleModels = models.filter(model => model.id.startsWith("gemini"));
    expect(googleModels.length).toBeGreaterThan(0);
    
    for (const model of googleModels) {
      const languageModel = myProvider.languageModel(model.id);
      expect(languageModel).toBeDefined();
    }
  });
});

// This test would be skipped in CI environments but can be run locally
// to verify that all required API keys are present
test.skip("All required API keys should be present", () => {
  // Mock function to check API keys
  const checkApiKeys = () => {
    const requiredEnvVars = [
      { name: "ANTHROPIC_API_KEY", models: ["claude-3.7-sonnet", "claude-3.5-sonnet"] },
      { name: "OPENAI_API_KEY", models: ["o3-mini"] },
      { name: "GOOGLE_GENERATIVE_AI_API_KEY", models: ["gemini-2.0-flash"] },
      { name: "GROQ_API_KEY", models: ["qwen-qwq-32b"] },
      { name: "MISTRAL_API_KEY", models: ["codestral-latest"] },
      { name: "PERPLEXITY_API_KEY", models: ["perplexity sonar"] },
      { name: "OPENROUTER_API_KEY", models: ["google/gemini-2.0-flash-thinking-exp:free"] },
    ];
  
    const missingKeys = [];
    
    for (const { name, models: relatedModels } of requiredEnvVars) {
      if (!process.env[name]) {
        missingKeys.push(`${name} (required for models: ${relatedModels.join(", ")})`);
      }
    }
    
    if (missingKeys.length > 0) {
      console.warn("Missing API keys:", missingKeys.join(", "));
      return false;
    }
    
    return true;
  };

  expect(checkApiKeys()).toBe(true);
});



================================================
File: lib/__tests__/tavily-chat.test.ts
================================================
import { NextRequest } from 'next/server';
import { streamText } from 'ai';

// Mock the streamText function
jest.mock('ai', () => ({
  streamText: jest.fn()
}));

// Mock the Tavily search function
const mockSearchTavily = jest.fn();
jest.mock('../../tools/tavily-search', () => ({
  searchTavily: mockSearchTavily
}));

// Mock the models
jest.mock('../../lib/models', () => ({
  models: [
    { id: 'claude-3.7-sonnet', name: 'Claude 3.7 Sonnet', description: 'Test description' },
    { id: 'o3-mini', name: 'Openai o3-mini', description: 'Test description' },
    { id: 'gemini-2.0-flash', name: 'Gemini 2.0 Flash', description: 'Test description' }
  ],
  modelApiNames: {
    'claude-3.7-sonnet': 'claude-3-7-sonnet-20250219',
    'o3-mini': 'o3-mini',
    'gemini-2.0-flash': 'gemini-2.0-flash'
  },
  myProvider: {
    languageModel: jest.fn((modelId) => ({ id: modelId }))
  }
}));

// Mock the route module
const mockPost = jest.fn();
jest.mock('../../app/api/tavily-chat/route', () => ({
  POST: mockPost
}));

describe('Tavily Chat API', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementation for searchTavily
    mockSearchTavily.mockImplementation(async (params) => {
      return {
        query: params.query,
        results: [
          {
            title: 'Test Result 1',
            url: 'https://example.com/1',
            content: 'This is test content 1',
            score: 0.9
          },
          {
            title: 'Test Result 2',
            url: 'https://example.com/2',
            content: 'This is test content 2',
            score: 0.8
          }
        ],
        answer: 'This is a test answer'
      };
    });
    
    // Default mock implementation for streamText
    (streamText as jest.Mock).mockImplementation(() => {
      return Promise.resolve({ text: 'I am the Claude 3.7 Sonnet model.' });
    });
    
    // Default mock implementation for POST
    mockPost.mockImplementation(async (req: NextRequest) => {
      const body = await req.json();
      const { messages, selectedModelId, isReasoningEnabled, searchQuery } = body;
      
      if (!selectedModelId) {
        return new Response(JSON.stringify({ error: 'Model ID is required' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      let searchResults = null;
      if (searchQuery) {
        searchResults = await mockSearchTavily({ query: searchQuery });
      }
      
      // Add search results to the system prompt if available
      let systemPrompt = `You are an AI researcher and engineer with deep research expertise.`;
      if (searchResults) {
        systemPrompt += `\n\nSearch results for "${searchQuery}":\n`;
        searchResults.results.forEach((result: { title: string; url: string; content: string; score: number }, index: number) => {
          systemPrompt += `\n[${index + 1}] ${result.title}\n${result.url}\n${result.content}\n`;
        });
      }
      
      // Add a special instruction to identify the model
      systemPrompt += `\n\nWhen asked "what LLM are you?", respond with "I am the ${selectedModelId} model."`;
      
      return streamText({
        model: selectedModelId,
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages
        ],
        temperature: 0.7,
      });
    });
  });
  
  test('handles chat request with Claude model and search query', async () => {
    const req = new NextRequest('http://localhost:3000/api/tavily-chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        selectedModelId: 'claude-3.7-sonnet',
        isReasoningEnabled: true,
        searchQuery: 'Latest AI developments'
      })
    });
    
    await mockPost(req);
    
    expect(mockSearchTavily).toHaveBeenCalledWith({
      query: 'Latest AI developments'
    });
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'claude-3.7-sonnet',
      messages: expect.arrayContaining([
        expect.objectContaining({ role: 'system' }),
        expect.objectContaining({ role: 'user', content: 'What LLM are you?' })
      ]),
      temperature: 0.7,
    }));
  });
  
  test('handles chat request with OpenAI model and no search query', async () => {
    // Change the mock implementation for this test
    (streamText as jest.Mock).mockImplementationOnce(() => {
      return Promise.resolve({ text: 'I am the o3-mini model.' });
    });
    
    const req = new NextRequest('http://localhost:3000/api/tavily-chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        selectedModelId: 'o3-mini',
        isReasoningEnabled: false,
        searchQuery: ''
      })
    });
    
    await mockPost(req);
    
    expect(mockSearchTavily).not.toHaveBeenCalled();
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'o3-mini',
      messages: expect.arrayContaining([
        expect.objectContaining({ role: 'system' }),
        expect.objectContaining({ role: 'user', content: 'What LLM are you?' })
      ]),
      temperature: 0.7,
    }));
  });
  
  test('handles chat request with Gemini model and search query', async () => {
    // Change the mock implementation for this test
    (streamText as jest.Mock).mockImplementationOnce(() => {
      return Promise.resolve({ text: 'I am the gemini-2.0-flash model.' });
    });
    
    const req = new NextRequest('http://localhost:3000/api/tavily-chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        selectedModelId: 'gemini-2.0-flash',
        isReasoningEnabled: true,
        searchQuery: 'Gemini AI capabilities'
      })
    });
    
    await mockPost(req);
    
    expect(mockSearchTavily).toHaveBeenCalledWith({
      query: 'Gemini AI capabilities'
    });
    
    expect(streamText).toHaveBeenCalledWith(expect.objectContaining({
      model: 'gemini-2.0-flash',
      messages: expect.arrayContaining([
        expect.objectContaining({ role: 'system' }),
        expect.objectContaining({ role: 'user', content: 'What LLM are you?' })
      ]),
      temperature: 0.7,
    }));
  });
  
  test('handles invalid model ID', async () => {
    const req = new NextRequest('http://localhost:3000/api/tavily-chat', {
      method: 'POST',
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        selectedModelId: '',
        isReasoningEnabled: true,
        searchQuery: 'Test query'
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(data).toEqual({ error: 'Model ID is required' });
    expect(streamText).not.toHaveBeenCalled();
  });
});



================================================
File: lib/__tests__/tavily-search.test.ts
================================================
import { NextRequest } from 'next/server';

// Mock the Tavily search function
const mockSearchTavily = jest.fn();

// Mock the Tavily search module
jest.mock('../../tools/tavily-search', () => ({
  searchTavily: mockSearchTavily
}));

// Mock the route module
const mockPost = jest.fn();
jest.mock('../../app/api/tavily-search/route', () => ({
  POST: mockPost
}));

describe('Tavily Search API', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementation for searchTavily
    mockSearchTavily.mockImplementation(async (params) => {
      return {
        query: params.query,
        results: [
          {
            title: 'Test Result 1',
            url: 'https://example.com/1',
            content: 'This is test content 1',
            score: 0.9
          },
          {
            title: 'Test Result 2',
            url: 'https://example.com/2',
            content: 'This is test content 2',
            score: 0.8
          }
        ],
        answer: 'This is a test answer'
      };
    });
    
    // Default mock implementation for POST
    mockPost.mockImplementation(async (req: NextRequest) => {
      const body = await req.json();
      const { query } = body;
      
      if (!query) {
        return new Response(JSON.stringify({ error: 'Query is required' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      const results = await mockSearchTavily({ query });
      return new Response(JSON.stringify(results), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    });
  });
  
  test('handles search request with valid query', async () => {
    const req = new NextRequest('http://localhost:3000/api/tavily-search', {
      method: 'POST',
      body: JSON.stringify({
        query: 'What is artificial intelligence?'
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(mockSearchTavily).toHaveBeenCalledWith({
      query: 'What is artificial intelligence?'
    });
    
    expect(data).toEqual({
      query: 'What is artificial intelligence?',
      results: [
        {
          title: 'Test Result 1',
          url: 'https://example.com/1',
          content: 'This is test content 1',
          score: 0.9
        },
        {
          title: 'Test Result 2',
          url: 'https://example.com/2',
          content: 'This is test content 2',
          score: 0.8
        }
      ],
      answer: 'This is a test answer'
    });
  });
  
  test('handles search request with empty query', async () => {
    const req = new NextRequest('http://localhost:3000/api/tavily-search', {
      method: 'POST',
      body: JSON.stringify({
        query: ''
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(data).toEqual({ error: 'Query is required' });
    expect(mockSearchTavily).not.toHaveBeenCalled();
  });
  
  test('handles search request with specific parameters', async () => {
    // Update the mock implementation for POST to pass all parameters
    mockPost.mockImplementationOnce(async (req: NextRequest) => {
      const body = await req.json();
      const { query, search_depth, include_domains, exclude_domains } = body;
      
      if (!query) {
        return new Response(JSON.stringify({ error: 'Query is required' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      const results = await mockSearchTavily({ 
        query,
        search_depth,
        include_domains,
        exclude_domains
      });
      
      return new Response(JSON.stringify(results), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    });
    
    mockSearchTavily.mockImplementationOnce(async (params) => {
      return {
        query: params.query,
        results: [
          {
            title: 'Custom Result',
            url: 'https://example.com/custom',
            content: 'This is custom content',
            score: 0.95
          }
        ],
        answer: 'This is a custom answer'
      };
    });
    
    const req = new NextRequest('http://localhost:3000/api/tavily-search', {
      method: 'POST',
      body: JSON.stringify({
        query: 'Custom query',
        search_depth: 'advanced',
        include_domains: ['example.com'],
        exclude_domains: ['excluded.com']
      })
    });
    
    const response = await mockPost(req);
    const data = await response.json();
    
    expect(mockSearchTavily).toHaveBeenCalledWith(expect.objectContaining({
      query: 'Custom query',
      search_depth: 'advanced',
      include_domains: ['example.com'],
      exclude_domains: ['excluded.com']
    }));
    
    expect(data).toEqual({
      query: 'Custom query',
      results: [
        {
          title: 'Custom Result',
          url: 'https://example.com/custom',
          content: 'This is custom content',
          score: 0.95
        }
      ],
      answer: 'This is a custom answer'
    });
  });
});



================================================
File: lib/ai-agents/types.ts
================================================
import { modelApiNames } from '../models';

export type ModelProvider = 'anthropic' | 'openai' | 'google' | 'groq' | 'mistral' | 'openrouter' | 'perplexity';

export type ModelConfig = {
  provider: ModelProvider;
  model: string;
  label: string;
};

// Use the existing models from the application
export const AVAILABLE_MODELS: ModelConfig[] = [
  {
    provider: 'anthropic',
    model: 'claude-3.7-sonnet',
    label: 'Claude 3.7 Sonnet',
  },
  {
    provider: 'anthropic',
    model: 'claude-3.5-sonnet',
    label: 'Claude 3.5 Sonnet',
  },
  {
    provider: 'openai',
    model: 'o3-mini',
    label: 'O3 Mini',
  },
  {
    provider: 'google',
    model: 'gemini-2.0-flash',
    label: 'Gemini 2.0 Flash',
  },
  {
    provider: 'groq',
    model: 'qwen-qwq-32b',
    label: 'Qwen QWQ 32B',
  },
  {
    provider: 'mistral',
    model: 'codestral-latest',
    label: 'Codestral Latest',
  },
  {
    provider: 'perplexity',
    model: 'perplexity sonar',
    label: 'Perplexity Sonar',
  },
  {
    provider: 'openrouter',
    model: 'google/gemini-2.0-flash-thinking-exp:free',
    label: 'Gemini 2.0 Flash Thinking',
  },
];

export type AgentMessage = {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  createdAt: Date;
  toolCalls?: {
    type: string;
    function: {
      name: string;
      arguments: Record<string, unknown>;
    };
  }[];
};



================================================
File: lib/ai-agents/utils.ts
================================================
import { ModelConfig } from './types';
import { myProvider } from '../models';

export function getModelInstance(config: ModelConfig) {
  return myProvider.languageModel(config.model);
}

export function getDefaultModels(): [ModelConfig, ModelConfig] {
  return [
    {
      provider: 'anthropic',
      model: 'claude-3.7-sonnet',
      label: 'Claude 3.7 Sonnet',
    },
    {
      provider: 'openai',
      model: 'o3-mini',
      label: 'O3 Mini',
    },
  ];
}



================================================
File: lib/supabase/chat-history.ts
================================================
import { createClient } from "@/utils/supabase/server";
import { cookies } from "next/headers";
import { ChatMessage, ChatSession, TimeFilter } from "../types/chat-history";

export async function getChatSessions(timeFilter: TimeFilter = 'all'): Promise<ChatSession[]> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  let query = supabase
    .from('chat_sessions')
    .select('*')
    .order('updated_at', { ascending: false });
  
  if (timeFilter !== 'all') {
    // Convert days to milliseconds
    const daysInMs = parseInt(timeFilter) * 24 * 60 * 60 * 1000;
    const fromDate = new Date(Date.now() - daysInMs).toISOString();
    
    query = query.gte('updated_at', fromDate);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching chat sessions:', error);
    return [];
  }
  
  return data as ChatSession[];
}

export async function getChatSessionMessages(sessionId: string): Promise<ChatMessage[]> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  const { data, error } = await supabase
    .from('chat_messages')
    .select('*')
    .eq('session_id', sessionId)
    .order('created_at', { ascending: true });
  
  if (error) {
    console.error('Error fetching chat messages:', error);
    return [];
  }
  
  return data as ChatMessage[];
}

export async function createChatSession(title: string): Promise<ChatSession | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  const { data: userData, error: userError } = await supabase.auth.getUser();
  
  if (userError || !userData.user) {
    console.error('User not authenticated:', userError);
    return null;
  }
  
  const { data, error } = await supabase
    .from('chat_sessions')
    .insert([
      {
        title,
        user_id: userData.user.id,
      },
    ])
    .select()
    .single();
  
  if (error) {
    console.error('Error creating chat session:', error);
    return null;
  }
  
  return data as ChatSession;
}

export async function saveChatMessage(
  sessionId: string,
  role: 'user' | 'assistant',
  content: string
): Promise<ChatMessage | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  // First, update the session's updated_at timestamp
  await supabase
    .from('chat_sessions')
    .update({ updated_at: new Date().toISOString() })
    .eq('id', sessionId);
  
  // Then, insert the new message
  const { data, error } = await supabase
    .from('chat_messages')
    .insert([
      {
        session_id: sessionId,
        role,
        content,
      },
    ])
    .select()
    .single();
  
  if (error) {
    console.error('Error saving chat message:', error);
    return null;
  }
  
  return data as ChatMessage;
}

export async function deleteChatSession(sessionId: string): Promise<boolean> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);
  
  // First, delete all messages in the session
  const { error: messagesError } = await supabase
    .from('chat_messages')
    .delete()
    .eq('session_id', sessionId);
  
  if (messagesError) {
    console.error('Error deleting chat messages:', messagesError);
    return false;
  }
  
  // Then, delete the session itself
  const { error: sessionError } = await supabase
    .from('chat_sessions')
    .delete()
    .eq('id', sessionId);
  
  if (sessionError) {
    console.error('Error deleting chat session:', sessionError);
    return false;
  }
  
  return true;
}



================================================
File: lib/types/chat-history.ts
================================================
export interface ChatSession {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  messages: ChatMessage[];
}

export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  created_at: string;
  session_id: string;
}

export type TimeFilter = '7' | '14' | '30' | 'all';




================================================
File: scripts/run-all-tests.sh
================================================
#!/bin/bash

# Run all Jest tests
echo "Running Jest tests..."
pnpm test

# If Jest tests pass, run the model tests
if [ $? -eq 0 ]; then
  echo "Jest tests passed. Running model tests..."
  node scripts/test-models.js
else
  echo "Jest tests failed. Skipping model tests."
  exit 1
fi



================================================
File: scripts/test-models.js
================================================
#!/usr/bin/env node

/**
 * This script tests all available models in both the main app and the Tavily AI search page.
 * It sends a request to each model asking "What LLM are you?" to verify that the model
 * is correctly identified and functioning.
 * 
 * Usage:
 * node scripts/test-models.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Load environment variables
require('dotenv').config({ path: path.resolve(process.cwd(), '.env.local') });

// Get models from the models.ts file
const modelsPath = path.resolve(process.cwd(), 'lib/models.ts');
const modelsContent = fs.readFileSync(modelsPath, 'utf8');

// Extract model IDs using regex
const modelIdRegex = /id:\s*['"]([^'"]+)['"]/g;
const modelIds = [];
let match;
while ((match = modelIdRegex.exec(modelsContent)) !== null) {
  modelIds.push(match[1]);
}

// Function to test a model with the main chat API
async function testMainChatModel(modelId) {
  try {
    console.log(`Testing main chat API with model: ${modelId}`);
    
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        model: modelId,
        reasoning: true,
      }),
    });
    
    if (!response.ok) {
      console.error(`Error testing model ${modelId}: ${response.statusText}`);
      return false;
    }
    
    // For streaming responses, we need to read the chunks
    const reader = response.body.getReader();
    let result = '';
    
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      
      // Convert the chunk to a string
      const chunk = new TextDecoder().decode(value);
      result += chunk;
    }
    
    console.log(`✅ Model ${modelId} responded successfully`);
    return true;
  } catch (error) {
    console.error(`Error testing model ${modelId}:`, error);
    return false;
  }
}

// Function to test a model with the Tavily chat API
async function testTavilyChatModel(modelId) {
  try {
    console.log(`Testing Tavily chat API with model: ${modelId}`);
    
    const response = await fetch('http://localhost:3000/api/tavily-chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'What LLM are you?' }],
        selectedModelId: modelId,
        isReasoningEnabled: true,
        searchQuery: 'What is the latest news about artificial intelligence?',
      }),
    });
    
    if (!response.ok) {
      console.error(`Error testing model ${modelId} with Tavily: ${response.statusText}`);
      return false;
    }
    
    // For streaming responses, we need to read the chunks
    const reader = response.body.getReader();
    let result = '';
    
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      
      // Convert the chunk to a string
      const chunk = new TextDecoder().decode(value);
      result += chunk;
    }
    
    console.log(`✅ Model ${modelId} with Tavily search responded successfully`);
    return true;
  } catch (error) {
    console.error(`Error testing model ${modelId} with Tavily:`, error);
    return false;
  }
}

// Main function to run the tests
async function runTests() {
  console.log('Starting model tests...');
  console.log(`Found ${modelIds.length} models to test: ${modelIds.join(', ')}`);
  
  // Start the Next.js development server
  console.log('Starting Next.js development server...');
  const serverProcess = require('child_process').spawn('pnpm', ['dev'], {
    stdio: 'inherit',
    shell: true,
  });
  
  // Give the server some time to start
  console.log('Waiting for server to start...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  // Test each model with the main chat API
  console.log('\n=== Testing Main Chat API ===');
  const mainResults = [];
  for (const modelId of modelIds) {
    const success = await testMainChatModel(modelId);
    mainResults.push({ modelId, success });
  }
  
  // Test each model with the Tavily chat API
  console.log('\n=== Testing Tavily Chat API ===');
  const tavilyResults = [];
  for (const modelId of modelIds) {
    const success = await testTavilyChatModel(modelId);
    tavilyResults.push({ modelId, success });
  }
  
  // Print summary
  console.log('\n=== Test Results Summary ===');
  console.log('Main Chat API:');
  for (const { modelId, success } of mainResults) {
    console.log(`${success ? '✅' : '❌'} ${modelId}`);
  }
  
  console.log('\nTavily Chat API:');
  for (const { modelId, success } of tavilyResults) {
    console.log(`${success ? '✅' : '❌'} ${modelId}`);
  }
  
  // Kill the server process
  serverProcess.kill();
  console.log('Tests completed.');
}

// Run the tests
runTests().catch(error => {
  console.error('Error running tests:', error);
  process.exit(1);
});



================================================
File: supabase/README.md
================================================
# Supabase Integration for Trainnect AI Search

This directory contains the necessary files and instructions for integrating Supabase with the Trainnect AI Search application.

## Setup Instructions

### 1. Environment Variables

Make sure the following environment variables are set in your `.env.local` file:

```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
```

### 2. Database Schema

The `schema.sql` file in this directory contains the SQL statements needed to set up the database schema for the chat history feature. You can run these statements in the Supabase SQL editor to create the necessary tables and policies.

### 3. Authentication

Supabase authentication is handled automatically through the middleware. The application uses cookie-based authentication to maintain user sessions.

The authentication flow is as follows:
1. Users sign in through your existing authentication system
2. The middleware in `utils/supabase/middleware.ts` refreshes the session on each request
3. Server components use the server-side Supabase client from `utils/supabase/server.ts`
4. Client components use the browser-side Supabase client from `utils/supabase/client.ts`

### 4. Chat History Feature

The chat history feature allows users to:

- View their chat history in the sidebar
- Filter chat sessions by time (7 days, 14 days, 30 days, or all)
- Copy chat sessions to the clipboard
- Delete chat sessions
- Restore previous chat sessions

## Features Implemented

### Chat History

- Chat sessions are stored in the `chat_sessions` table
- Chat messages are stored in the `chat_messages` table
- Users can view, create, and delete their chat history
- Chat history is filtered by time (7 days, 14 days, 30 days, or all)
- Chat sessions can be exported to clipboard

## File Structure

- `schema.sql` - SQL schema for the Supabase database
- `../utils/supabase/server.ts` - Server-side Supabase client
- `../utils/supabase/client.ts` - Client-side Supabase client
- `../utils/supabase/middleware.ts` - Middleware for session handling
- `../lib/types/chat-history.ts` - TypeScript interfaces for chat history
- `../lib/supabase/chat-history.ts` - Functions for interacting with chat history
- `../components/chat-history/chat-history-dropdown.tsx` - UI component for chat history

## Row Level Security (RLS) Policies

The database is configured with Row Level Security to ensure that users can only access their own data. The policies are defined in the `schema.sql` file and include:

- Users can only select their own chat sessions
- Users can only insert chat sessions with their own user ID
- Users can only update their own chat sessions
- Users can only delete their own chat sessions
- Similar policies apply to chat messages

## Usage

The chat history feature is accessible from the sidebar. Users can:

1. View their chat history
2. Filter chat history by time
3. Delete chat sessions
4. Copy chat sessions to clipboard
5. Restore previous chat sessions

## Security

Row Level Security (RLS) policies are implemented to ensure that users can only access their own chat sessions and messages. The policies are defined in the `schema.sql` file.

## Troubleshooting

If you encounter issues with the Supabase integration:

1. Check that your environment variables are correctly set
2. Ensure the SQL schema has been properly executed in your Supabase instance
3. Verify that your Supabase project has Row Level Security enabled
4. Check the browser console for any error messages
5. Make sure your authentication system is properly configured

For more information, refer to the [Supabase documentation](https://supabase.com/docs).



================================================
File: supabase/schema.sql
================================================
-- Create tables for chat history
CREATE TABLE IF NOT EXISTS chat_sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL DEFAULT 'Untitled Chat',
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS chat_messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  session_id UUID REFERENCES chat_sessions(id) ON DELETE CASCADE,
  role TEXT NOT NULL CHECK (role IN ('user', 'assistant')),
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_chat_sessions_user_id ON chat_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_chat_sessions_updated_at ON chat_sessions(updated_at);
CREATE INDEX IF NOT EXISTS idx_chat_messages_session_id ON chat_messages(session_id);
CREATE INDEX IF NOT EXISTS idx_chat_messages_created_at ON chat_messages(created_at);

-- Create RLS policies for chat_sessions
ALTER TABLE chat_sessions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own chat sessions"
  ON chat_sessions FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own chat sessions"
  ON chat_sessions FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own chat sessions"
  ON chat_sessions FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own chat sessions"
  ON chat_sessions FOR DELETE
  USING (auth.uid() = user_id);

-- Create RLS policies for chat_messages
ALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view messages in their own chat sessions"
  ON chat_messages FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert messages in their own chat sessions"
  ON chat_messages FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update messages in their own chat sessions"
  ON chat_messages FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete messages in their own chat sessions"
  ON chat_messages FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM chat_sessions
      WHERE chat_sessions.id = chat_messages.session_id
      AND chat_sessions.user_id = auth.uid()
    )
  );

-- Create function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to update the updated_at timestamp
CREATE TRIGGER update_chat_sessions_updated_at
BEFORE UPDATE ON chat_sessions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();



================================================
File: tests/multimodal.test.tsx
================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';

// Mock the Chat component instead of importing it
const mockAppend = jest.fn();
const mockStop = jest.fn();

// Mock component that simulates the Chat component's behavior
const MockChat = () => {
  const [files, setFiles] = React.useState<File[]>([]);
  const [previews, setPreviews] = React.useState<string[]>([]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFiles = Array.from(e.target.files);
      setFiles(selectedFiles);
      
      // Create previews for the files
      const newPreviews = selectedFiles.map(file => URL.createObjectURL(file));
      setPreviews(newPreviews);
    }
  };

  const handleRemoveFile = (index: number) => {
    const newFiles = [...files];
    newFiles.splice(index, 1);
    setFiles(newFiles);

    const newPreviews = [...previews];
    URL.revokeObjectURL(newPreviews[index]);
    newPreviews.splice(index, 1);
    setPreviews(newPreviews);
  };

  const handleSendMessage = () => {
    mockAppend("Test message", { attachments: files.map(file => ({ file })) });
  };

  return (
    <div>
      <div className="chat-container">
        <div className="message-list">
          {/* Message list would go here */}
        </div>
        <div className="chat-input">
          <input 
            type="text" 
            placeholder="Type a message..." 
            data-testid="chat-input"
          />
          <label htmlFor="file-upload" className="file-upload-label" data-testid="file-upload-label">
            <span>Upload</span>
          </label>
          <input
            id="file-upload"
            type="file"
            accept="image/png,image/jpeg,image/gif,image/webp,application/pdf"
            onChange={handleFileChange}
            style={{ display: 'none' }}
            data-testid="file-upload"
            multiple
          />
          <button onClick={handleSendMessage} data-testid="send-button">
            Send
          </button>
        </div>
        {files.length > 0 && (
          <div className="file-previews" data-testid="file-previews">
            {previews.map((preview, index) => (
              <div key={index} className="file-preview">
                <img 
                  src={preview} 
                  alt={`Preview ${index}`} 
                  data-testid={`file-preview-${index}`}
                />
                <button 
                  onClick={() => handleRemoveFile(index)}
                  data-testid={`remove-file-${index}`}
                >
                  Remove
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

describe('Multimodal Feature', () => {
  beforeEach(() => {
    // Reset mocks before each test
    mockAppend.mockClear();
    mockStop.mockClear();
  });

  test('should render file upload input', async () => {
    render(<MockChat />);
    
    // Check if file upload input is rendered
    const fileUploadLabel = screen.getByTestId('file-upload-label');
    expect(fileUploadLabel).toBeInTheDocument();
  });

  test('should allow uploading and displaying file previews', async () => {
    render(<MockChat />);
    
    // Create a mock file
    const file = new File(['dummy content'], 'test-image.png', { type: 'image/png' });
    
    // Get the file input and simulate a file upload
    const fileInput = screen.getByTestId('file-upload');
    
    // Mock the URL.createObjectURL function
    const originalCreateObjectURL = URL.createObjectURL;
    URL.createObjectURL = jest.fn(() => 'mock-url');
    
    // Simulate file upload
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // Check if preview is displayed
    await waitFor(() => {
      const filePreview = screen.getByTestId('file-previews');
      expect(filePreview).toBeInTheDocument();
    });
    
    // Restore the original function
    URL.createObjectURL = originalCreateObjectURL;
  });

  test('should allow removing uploaded files', async () => {
    render(<MockChat />);
    
    // Create a mock file
    const file = new File(['dummy content'], 'test-image.png', { type: 'image/png' });
    
    // Get the file input and simulate a file upload
    const fileInput = screen.getByTestId('file-upload');
    
    // Mock URL functions
    const originalCreateObjectURL = URL.createObjectURL;
    const originalRevokeObjectURL = URL.revokeObjectURL;
    URL.createObjectURL = jest.fn(() => 'mock-url');
    URL.revokeObjectURL = jest.fn();
    
    // Simulate file upload
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // Check if preview is displayed
    await waitFor(() => {
      const filePreview = screen.getByTestId('file-previews');
      expect(filePreview).toBeInTheDocument();
    });
    
    // Remove the file
    const removeButton = screen.getByTestId('remove-file-0');
    fireEvent.click(removeButton);
    
    // Check if preview is removed
    await waitFor(() => {
      expect(screen.queryByTestId('file-previews')).not.toBeInTheDocument();
    });
    
    // Restore the original functions
    URL.createObjectURL = originalCreateObjectURL;
    URL.revokeObjectURL = originalRevokeObjectURL;
  });

  test('should send message with attachments', async () => {
    render(<MockChat />);
    
    // Create a mock file
    const file = new File(['dummy content'], 'test-image.png', { type: 'image/png' });
    
    // Get the file input and simulate a file upload
    const fileInput = screen.getByTestId('file-upload');
    
    // Mock URL functions
    const originalCreateObjectURL = URL.createObjectURL;
    URL.createObjectURL = jest.fn(() => 'mock-url');
    
    // Simulate file upload
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // Send the message
    const sendButton = screen.getByTestId('send-button');
    fireEvent.click(sendButton);
    
    // Check if append was called with the file
    expect(mockAppend).toHaveBeenCalledWith("Test message", { attachments: [{ file }] });
    
    // Restore the original function
    URL.createObjectURL = originalCreateObjectURL;
  });
});



================================================
File: tests/tavily-chat.test.tsx
================================================
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';

// Mock the TavilyChat component instead of importing it
const mockAppend = jest.fn();
const mockStop = jest.fn();
const mockSetMessages = jest.fn();
const mockSetIsSearchEnabled = jest.fn();

// Mock the models
jest.mock('../lib/models', () => ({
  models: [
    { id: 'claude-3.7-sonnet', name: 'Claude 3.7 Sonnet', description: 'Test description' },
    { id: 'o3-mini', name: 'Openai o3-mini', description: 'Test description' },
    { id: 'gemini-2.0-flash', name: 'Gemini 2.0 Flash', description: 'Test description' }
  ]
}));

// Define message type
interface Message {
  role: string;
  content: string;
}

// Mock component that simulates the TavilyChat component's behavior
const MockTavilyChat = () => {
  const [isSearchEnabled, setIsSearchEnabled] = React.useState(false);
  const [selectedModel, setSelectedModel] = React.useState('claude-3.7-sonnet');
  const [inputValue, setInputValue] = React.useState('');
  const [messages, setMessages] = React.useState<Message[]>([]);
  
  const handleSearchToggle = () => {
    setIsSearchEnabled(!isSearchEnabled);
    mockSetIsSearchEnabled(!isSearchEnabled);
  };
  
  const handleModelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedModel(e.target.value);
  };
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };
  
  const handleSendMessage = () => {
    if (inputValue.trim()) {
      const newMessage: Message = { role: 'user', content: inputValue };
      setMessages([...messages, newMessage]);
      mockSetMessages([...messages, newMessage]);
      mockAppend(inputValue, { 
        data: { 
          selectedModelId: selectedModel,
          isReasoningEnabled: true,
          searchQuery: isSearchEnabled ? inputValue : ''
        } 
      });
      setInputValue('');
    }
  };
  
  return (
    <div>
      <div className="chat-header">
        <div className="model-selector">
          <select 
            value={selectedModel} 
            onChange={handleModelChange}
            data-testid="model-selector"
          >
            <option value="claude-3.7-sonnet">Claude 3.7 Sonnet</option>
            <option value="o3-mini">OpenAI o3-mini</option>
            <option value="gemini-2.0-flash">Gemini 2.0 Flash</option>
          </select>
        </div>
        <div className="search-toggle">
          <label>
            <input 
              type="checkbox" 
              checked={isSearchEnabled} 
              onChange={handleSearchToggle}
              data-testid="search-toggle"
            />
            Web Search
          </label>
        </div>
      </div>
      <div className="chat-container">
        <div className="message-list" data-testid="message-list">
          {messages.map((message, index) => (
            <div key={index} className={`message ${message.role}`} data-testid={`message-${index}`}>
              {message.content}
            </div>
          ))}
        </div>
        <div className="chat-input">
          <input 
            type="text" 
            value={inputValue}
            onChange={handleInputChange}
            placeholder="Type a message..." 
            data-testid="chat-input"
          />
          <button 
            onClick={handleSendMessage} 
            data-testid="send-button"
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );
};

describe('TavilyChat Component', () => {
  beforeEach(() => {
    // Reset mocks before each test
    mockAppend.mockClear();
    mockStop.mockClear();
    mockSetMessages.mockClear();
    mockSetIsSearchEnabled.mockClear();
  });

  test('should render chat interface with model selector and search toggle', () => {
    render(<MockTavilyChat />);
    
    // Check if model selector is rendered
    const modelSelector = screen.getByTestId('model-selector');
    expect(modelSelector).toBeInTheDocument();
    
    // Check if search toggle is rendered
    const searchToggle = screen.getByTestId('search-toggle');
    expect(searchToggle).toBeInTheDocument();
    expect(searchToggle).not.toBeChecked();
    
    // Check if chat input is rendered
    const chatInput = screen.getByTestId('chat-input');
    expect(chatInput).toBeInTheDocument();
  });

  test('should toggle search functionality', () => {
    render(<MockTavilyChat />);
    
    // Get the search toggle
    const searchToggle = screen.getByTestId('search-toggle');
    
    // Toggle search on
    fireEvent.click(searchToggle);
    expect(mockSetIsSearchEnabled).toHaveBeenCalledWith(true);
    
    // Toggle search off
    fireEvent.click(searchToggle);
    expect(mockSetIsSearchEnabled).toHaveBeenCalledWith(false);
  });

  test('should change selected model', () => {
    render(<MockTavilyChat />);
    
    // Get the model selector
    const modelSelector = screen.getByTestId('model-selector');
    
    // Change model to OpenAI
    fireEvent.change(modelSelector, { target: { value: 'o3-mini' } });
    expect(modelSelector).toHaveValue('o3-mini');
    
    // Change model to Gemini
    fireEvent.change(modelSelector, { target: { value: 'gemini-2.0-flash' } });
    expect(modelSelector).toHaveValue('gemini-2.0-flash');
  });

  test('should send message with search query when search is enabled', () => {
    render(<MockTavilyChat />);
    
    // Get the search toggle and enable it
    const searchToggle = screen.getByTestId('search-toggle');
    fireEvent.click(searchToggle);
    
    // Get the chat input and send button
    const chatInput = screen.getByTestId('chat-input');
    const sendButton = screen.getByTestId('send-button');
    
    // Type a message
    fireEvent.change(chatInput, { target: { value: 'What LLM are you?' } });
    
    // Send the message
    fireEvent.click(sendButton);
    
    // Check if append was called with the correct parameters
    expect(mockAppend).toHaveBeenCalledWith('What LLM are you?', {
      data: {
        selectedModelId: 'claude-3.7-sonnet',
        isReasoningEnabled: true,
        searchQuery: 'What LLM are you?'
      }
    });
    
    // Check if the input was cleared
    expect(chatInput).toHaveValue('');
  });

  test('should send message without search query when search is disabled', () => {
    render(<MockTavilyChat />);
    
    // Get the chat input and send button
    const chatInput = screen.getByTestId('chat-input');
    const sendButton = screen.getByTestId('send-button');
    
    // Type a message
    fireEvent.change(chatInput, { target: { value: 'What LLM are you?' } });
    
    // Send the message
    fireEvent.click(sendButton);
    
    // Check if append was called with the correct parameters
    expect(mockAppend).toHaveBeenCalledWith('What LLM are you?', {
      data: {
        selectedModelId: 'claude-3.7-sonnet',
        isReasoningEnabled: true,
        searchQuery: ''
      }
    });
    
    // Check if the input was cleared
    expect(chatInput).toHaveValue('');
  });

  test('should not send empty messages', () => {
    render(<MockTavilyChat />);
    
    // Get the send button
    const sendButton = screen.getByTestId('send-button');
    
    // Try to send an empty message
    fireEvent.click(sendButton);
    
    // Check that append was not called
    expect(mockAppend).not.toHaveBeenCalled();
  });
});



================================================
File: tools/README.md
================================================
# Tavily Search Tool

This directory contains the Tavily Search Tool implementation for the Trainnect AI application.

## Setup

1. Sign up for a Tavily API key at [Tavily's website](https://tavily.com/)
2. Add your Tavily API key to your `.env.local` file:

```
TAVILY_API_KEY=your-tavily-api-key
```

## Usage

The Tavily Search Tool is integrated into the application at `/tavily-ai-search`. This page provides all the same functionality as the main chat interface but with the added ability to search the web for information related to user queries.

To use the Tavily Search:
1. Navigate to http://localhost:3000/tavily-ai-search
2. Toggle the "Web Search" option
3. Enter your query
4. The AI will use Tavily to search the web and incorporate the results into its response



================================================
File: tools/tavily-search.ts
================================================
// tools/tavily-search.ts
import { tavily } from "@tavily/core";
import { tavilyLogger } from "@/utils/tavily-logger";

// Initialize Tavily client
export const tavilyClient = (apiKey?: string) => {
  const key = apiKey || process.env.TAVILY_API_KEY;
  if (!key) {
    throw new Error("No Tavily API key provided");
  }
  
  return tavily({ apiKey: key });
};

export interface TavilySearchParams {
  query: string;
  searchDepth?: "basic" | "advanced";
  maxResults?: number;
  includeAnswer?: boolean;
  includeRawContent?: boolean;
  includeDomains?: string[];
  excludeDomains?: string[];
  modelId?: string; 
}

export async function searchTavily(params: TavilySearchParams) {
  const client = tavilyClient();
  
  try {
    const response = await client.search(
      params.query,
      {
        searchDepth: params.searchDepth || "basic",
        maxResults: params.maxResults || 5,
        includeAnswer: params.includeAnswer || false,
        includeRawContent: params.includeRawContent || false,
        includeDomains: params.includeDomains,
        excludeDomains: params.excludeDomains,
      }
    );
    
    tavilyLogger.logSearchResults(params.query, response, params.modelId);
    tavilyLogger.appendToConsolidatedLog(params.query, response, params.modelId);
    
    return response;
  } catch (error) {
    console.error("Tavily search error:", error);
    throw error;
  }
}



================================================
File: utils/ai-agents-logger.ts
================================================
// utils/ai-agents-logger.ts
import fs from 'fs';
import path from 'path';
import type { ModelConfig } from '@/lib/ai-agents/types';

/**
 * Logger utility for saving AI Agents processing results
 */
export class AIAgentsLogger {
  private outputDir: string;
  
  constructor(outputDir: string = 'ai_agents_output') {
    this.outputDir = path.resolve(process.cwd(), outputDir);
    this.ensureDirectoryExists();
  }
  
  private ensureDirectoryExists(): void {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
  }
  
  /**
   * Log AI Agents processing results
   */
  async logProcessing(params: {
    timestamp: string;
    query: string;
    primaryModel: ModelConfig;
    secondaryModel: ModelConfig;
    primaryResults: any;
    secondaryResults: any;
  }) {
    const { timestamp, query, primaryModel, secondaryModel, primaryResults, secondaryResults } = params;
    
    // Create filename with timestamp and both model names
    const filename = `ai-agents-${timestamp}-${primaryModel.model}-${secondaryModel.model}.json`;
    const filePath = path.join(this.outputDir, filename);
    
    // Create log entry
    const logEntry = {
      timestamp,
      query,
      primary: {
        model: primaryModel,
        results: primaryResults
      },
      secondary: {
        model: secondaryModel,
        results: secondaryResults
      }
    };
    
    // Write to file
    await fs.promises.writeFile(
      filePath,
      JSON.stringify(logEntry, null, 2)
    );
    
    // Append to log file
    const logLine = JSON.stringify({
      timestamp,
      query,
      primaryModel: primaryModel.model,
      secondaryModel: secondaryModel.model
    });
    
    await fs.promises.appendFile(
      path.join(this.outputDir, 'ai-agents-log.jsonl'),
      logLine + '\n'
    );
  }
}

// Export a singleton instance
export const aiAgentsLogger = new AIAgentsLogger();



================================================
File: utils/tavily-logger.ts
================================================
// utils/tavily-logger.ts
import fs from 'fs';
import path from 'path';

/**
 * Logger utility for saving Tavily search results to files
 */
export class TavilyLogger {
  private outputDir: string;
  
  constructor(outputDir: string = 'tavily_output') {
    // Resolve the output directory path
    this.outputDir = path.resolve(process.cwd(), outputDir);
    
    // Ensure the output directory exists
    this.ensureDirectoryExists();
  }
  
  /**
   * Ensure the output directory exists
   */
  private ensureDirectoryExists(): void {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
  }
  
  /**
   * Log Tavily search results to a file
   * @param query The search query
   * @param results The search results
   * @param model The model used for the search (if applicable)
   */
  public logSearchResults(query: string, results: any, model?: string): void {
    try {
      // Create a timestamp for the filename
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const modelInfo = model ? `-${model.replace(/[^a-zA-Z0-9-]/g, '-')}` : '';
      const filename = `tavily-search-${timestamp}${modelInfo}.json`;
      const filePath = path.join(this.outputDir, filename);
      
      // Create the log data
      const logData = {
        timestamp: new Date().toISOString(),
        model,
        query,
        results
      };
      
      // Write the log data to a file
      fs.writeFileSync(filePath, JSON.stringify(logData, null, 2));
      
      console.log(`Tavily search results logged to ${filePath}`);
    } catch (error) {
      console.error('Error logging Tavily search results:', error);
    }
  }
  
  /**
   * Append Tavily search results to a consolidated log file
   * @param query The search query
   * @param results The search results
   * @param model The model used for the search (if applicable)
   */
  public appendToConsolidatedLog(query: string, results: any, model?: string): void {
    try {
      const logFilePath = path.join(this.outputDir, 'tavily-search-log.jsonl');
      
      // Create the log entry
      const logEntry = {
        timestamp: new Date().toISOString(),
        model,
        query,
        results
      };
      
      // Append the log entry to the file
      fs.appendFileSync(
        logFilePath, 
        JSON.stringify(logEntry) + '\n'
      );
    } catch (error) {
      console.error('Error appending to consolidated Tavily log:', error);
    }
  }
}

// Export a singleton instance with the default output directory
export const tavilyLogger = new TavilyLogger();



================================================
File: utils/supabase/client.ts
================================================
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
};



================================================
File: utils/supabase/middleware.ts
================================================
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export const createClient = (request: NextRequest) => {
  // Create an unmodified response
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          // If the cookie is updated, update the cookies for the request and response
          request.cookies.set({
            name,
            value,
            ...options,
          });
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name: string, options: CookieOptions) {
          // If the cookie is removed, update the cookies for the request and response
          request.cookies.delete(name);
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.delete(name);
        },
      },
    }
  );

  return { supabase, response };
};



================================================
File: utils/supabase/server-client.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = async () => {
  const cookieStore = await cookies(); // Await the cookies() call
  
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: Record<string, any>) {
          cookieStore.set(name, value, options);
        },
        remove(name: string, options: Record<string, any>) {
          cookieStore.set(name, "", { ...options, maxAge: 0 });
        },
      },
    }
  );
};



================================================
File: utils/supabase/server.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { cookies, RequestCookies } from "next/headers"; // Import RequestCookies

export const createClient = (cookieStore: RequestCookies) => {
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: Record<string, any>) {
          cookieStore.set(name, value, options);
        },
        remove(name: string, options: Record<string, any>) {
          cookieStore.set(name, "", { ...options, maxAge: 0 });
        },
      },
    }
  );
};

// Example of how to call createClient
export const initializeClient = async () => {
  const cookieStore = await cookies(); // Await the cookies() call
  return createClient(cookieStore); // Pass the resolved cookieStore
};


